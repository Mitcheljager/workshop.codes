-
  args:
  - name: Player
    description: The player whose ability to check.
    type: Player
    default: Event Player
  - name: Button
    description: The ability to check associated by button.
    type: Button
    default: Button
  return: Float
  en-US: Ability Cooldown
-
  description: Converts a Hero and Button parameter into a string that shows up as
    an icon (up to 4 per string).
  args:
  - name: Hero
    description: The hero for the ability that will be converted to an icon.
    type: Hero
    default: Hero
  - name: Button
    description: The button for the ability that will be converted to an icon.
    type: Button
    default: Button
  return: String
  en-US: Ability Icon String
-
  description: The absolute value of the specified value.
  args:
  - name: Value
    description: The real number value whose absolute value will be computed.
    type: Float
    default: Number
  return: Float
  en-US: Absolute Value
-
  description: The sum of two numbers or vectors.
  args_allow_null: true
  args:
  - name: Value
    description: The left-hand operand. May be any value that results in a number
      or a vector.
    type:
    - Float
    - Vector
    default: Number
  - name: Value
    description: The right-hand operand. May be any value that results in a number
      or a vector.
    type:
    - Float
    - Vector
    default: Number
  return:
  - Float
  - Vector
  en-US: Add
-
  description: An array containing all dead players on a team or in the match.
  args:
  - name: Team
    description: The team or teams from which players may come.
    type: Team
    default: Team
  return:
    Array: Player
  en-US: All Dead Players
-
  description: "The array of all damage heroes in overwatch. The order is as follows:\n
    \       \n        0. Reaper\n        1. Tracer\n        2. Hanzo\n        3. Torbjorn\n
    \       4. Pharah\n        5. Widowmaker\n        6. Bastion\n        7. Symmetra\n
    \       8. Genji\n        9. Cassidy\n        10. Junkrat\n        11. Soldier\n
    \       12. Mei\n        13. Sombra\n        14. Doomfist\n        15. Ashe  \n
    \       16. Echo  \n"
  return:
    Array: Hero
  en-US: All Damage Heroes
-
  description: "The array of all heroes in overwatch. The order is as follows:\n        \n
    \       0. Reaper   \n        1. Tracer   \n        2. Mercy    \n        3. Hanzo
    \   \n        4. Torbjorn \n        5. Reinhardt\n        6. Pharah   \n        7.
    Winston  \n        8. Widowmaker\n        9. Bastion  \n        10. Symmetra \n
    \       11. Zenyatta \n        12. Genji    \n        13. Roadhog  \n        14.
    Cassidy   \n        15. Junkrat  \n        16. Zarya    \n        17. Soldier  \n
    \       18. Lucio    \n        19. Dva      \n        20. Mei      \n        21.
    Sombra   \n        22. Doomfist \n        23. Ana      \n        24. Orisa    \n
    \       25. Brigitte \n        26. Moira    \n        27. Hammond  \n        28.
    Ashe     \n        29. Echo \n        30. Baptiste    \n        31. Sigma    \n"
  return:
    Array: Hero
  en-US: All Heroes
-
  description: An array containing all living players on a team or in the match.
  args:
  - name: Team
    description: The team or teams from which players may come.
    type: Team
    default: Team
  return:
    Array: Player
  en-US: All Living Players
-
  description: An array containing all players on a team or in the match.
  args:
  - name: Team
    description: The team or teams from which players may come.
    type: Team
    default: Team
  return:
    Array: Player
  en-US: All Players
-
  description: An array containing all players occupying neither a payload nor a control
    point (either on a team or in the match).
  args:
  - name: Team
    description: The team or teams from which players may come.
    type: Team
    default: Team
  return:
    Array: Player
  en-US: All Players Not On Objective
-
  description: An array containing all players occupying a payload or control point
    (either on a team or in the match).
  args:
  - name: Team
    description: The team or teams from which players may come.
    type: Team
    default: Team
  return:
    Array: Player
  en-US: All Players On Objective
-
  description: The array of heroes from which the specified player is currently allowed
    to select.
  args:
  - name: Player
    description: The player whose allowed heroes to acquire.
    type: Player
    default: Event Player
  return:
    Array: Hero
  en-US: Allowed Heroes
-
  description: "The array of all support heroes in overwatch. The order is as follows:\n
    \       \n        0. Mercy\n        1. Zenyatta\n        2. Lucio\n        3.
    Ana\n        4. Brigitte\n        5. Moira\n        6. Baptiste    \n        "
  return:
    Array: Hero
  en-US: All Support Heroes
-
  description: "The array of all tank heroes in overwatch. The order is as follows:\n
    \       \n        0. Reinhardt\n        1. Winston\n        2. Roadhog\n        3.
    Zarya\n        4. Dva\n        5. Orisa\n        6. Hammond\n        7. Sigma
    \   \n        "
  return:
    Array: Hero
  en-US: All Tank Heroes
-
  description: The player's current height in meters above a surface. Results in 0
    whenever the player is on a surface.
  args:
  - name: Player
    description: The player whose altitude to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Altitude Of
-
  description: Whether both of the two inputs are true (or equivalent to true).
  args:
  - name: Value
    description: One of the two inputs considered. If both are true (or equivalent
      to true), then the and value is true.
    type: Boolean
    default: 'True'
  - name: Value
    description: One of the two inputs considered. If both are true (or equivalent
      to true), then the and value is true.
    type: Boolean
    default: 'True'
  return: Boolean
  en-US: And
-
  description: The angle in degrees between two directional vectors (no normalization
    required).
  args:
  - name: Vector
    description: One of two directional vectors between which to measure the angle
      in degrees. This vector does not need to be pre-normalized.
    type: Direction
    default: Vector
  - name: Vector
    description: One of two directional vectors between which to measure the angle
      in degrees. This vector does not need to be pre-normalized.
    type: Direction
    default: Vector
  return: Float
  en-US: Angle Between Vectors
-
  description: The difference in degrees between two angles. After the angles are
    wrapped to be within +/- 180 of each other, the result is positive if the second
    angle is greater than the first angle. Otherwise, the result is zero or negative.
  args:
  - name: Angle
    description: One of the two angles between which to measure the resulting angle.
    type: Float
    default: Number
  - name: Angle
    description: One of the two angles between which to measure the resulting angle.
    type: Float
    default: Number
  return: Float
  en-US: Angle Difference
-
  description: A copy of an array with one or more values appended to the end.
  args_allow_null: true
  args:
  - name: Array
    description: The array to which to append.
    type: Array
    default: All Players
  - name: Value
    description: The value to append to the end of the array. If this value is itself
      an array, each element is appended.
    type:
    - Object
    - Array: Object
    default: Number
  return: Array
  en-US: Append To Array
-
  description: Arccosine in degrees of the specified value.
  args:
  - name: Value
    description: Input value for the function.
    type: Float
    default: Number
  return: Float
  en-US: Arccosine In Degrees
-
  description: Arccosine in radians of the specified value.
  args:
  - name: Value
    description: Input value for the function.
    type: Float
    default: Number
  return: Float
  en-US: Arccosine In Radians
-
  description: Arcsine in degrees of the specified value.
  args:
  - name: Value
    description: Input value for the function.
    type: Float
    default: Number
  return: Float
  en-US: Arcsine In Degrees
-
  description: Arcsine in radians of the specified value.
  args:
  - name: Value
    description: Input value for the function.
    type: Float
    default: Number
  return: Float
  en-US: Arcsine In Radians
-
  description: Arctangent in degrees of the specified numerator and denominator (often
    referred to as atan2).
  args:
  - name: Numerator
    description: Numerator input for the function.
    type: Float
    default: Number
  - name: Denominator
    description: Denominator input for the function.
    type: Float
    default: Number
  return: Float
  en-US: Arctangent In Degrees
-
  description: Arctangent in radians of the specified numerator and denominator (often
    referred to as atan2).
  args:
  - name: Numerator
    description: Numerator input for the function.
    type: Float
    default: Number
  - name: Denominator
    description: Denominator input for the function.
    type: Float
    default: Number
  return: Float
  en-US: Arctangent In Radians
-
  description: An array constructed from the listed values.
  args_unlimited: true
  args:
  - name: "[0]"
    description: The value that will be stored in the array at index [0].
    type:
    - Object
    - Array
    default: 'Null'
  return: Array
  en-US: Array
  es-ES: Matriz
  pl-PL: Tabela
  zh-TW: 陣列
-
  description: Whether the specified array contains the specified value.
  args:
  - name: Array
    description: The array in which to search for the specified value.
    type: Array
    default: All Players
  - name: Value
    description: The value for which to search.
    type: Object
    default: Number
  return: Boolean
  en-US: Array Contains
-
  description: A copy of the specified array containing only values from a specified
    index range.
  args:
  - name: Array
    description: The array from which to make a copy.
    type:
      Array: Object
    default: All Players
  - name: Start Index
    description: The first index of the range.
    type: Integer
    default: Number
  - name: Count
    description: The number of elements in the resulting array. The resulting array
      will contain fewer elements if the specified range exceeds the bounds of the
      array.
    type: Integer
    default: Number
  return:
    Array: Object
  en-US: Array Slice
-
  description: The player that dealt the damage for the event currently being processed
    by this rule. May be the same as the victim or the event player.
  args:
  return: Player
  en-US: Attacker
-
  description: Shorthand for the directional vector(0, 0, -1), which points backward.
  args:
  return:
    Direction:
    - Integer
    - Integer
    - Integer
  en-US: Backward
-
  description: A button constant.
  args:
  - name: Button
    description: A button constant.
    type: Button
    default: Interact
  return: Button
  en-US: Button
-
  description: The player closest to a position, optionally restricted by team.
  args:
  - name: Center
    description: The position from which to measure proximity.
    type: Position
    default: Vector
  - name: Team
    description: The team or teams from which the closest player will come.
    type: Team
    default: Team
  return: Player
  en-US: Closest Player To
-
  description: Whether the comparison of the two inputs is true.
  args:
  - name: Value
    description: The left-hand side of the comparison. This may be any value type
      if the operation is == or !=. Otherwise, real numbers are expected.
    type:
    - Object
    - Array
    default: Number
  - name: Comparison
    description: ''
    type: Operator
    default: "=="
  - name: Value
    description: The right-hand side of the comparison. This may be any value type
      if the operation is == or !=. Otherwise, real numbers are expected.
    type:
    - Object
    - Array
    default: Number
  return: Boolean
  en-US: Compare
-
  description: The score percentage for the specified team in control mode.
  args:
  - name: Team
    description: The team whose score percentage to acquire.
    type: Team
    default: Team
  return: Float
  en-US: Control Mode Scoring Percentage
-
  description: The team that is currently accumulating score percentage in control
    mode. Results in all if neither team is accumulating score.
  return: Team
  en-US: Control Mode Scoring Team
-
  description: Cosine of the specified angle in degrees.
  args:
  - name: Angle
    description: Angle in degrees.
    type: Float
    default: Number
  return: Float
  en-US: Cosine From Degrees
-
  description: Cosine of the specified angle in radians.
  args:
  - name: Angle
    description: Angle in radians.
    type: Float
    default: Number
  return: Float
  en-US: Cosine From Radians
-
  description: The number of elements in the specified array.
  args:
  - name: Array
    description: The array whose elements will be counted.
    type: Array
    default: Global Variable
  return: Integer
  en-US: Count Of
-
  description: The cross product of the specified values. (Left cross up equals forward.)
  args:
  - name: Value
    description: The left-hand-side vector operand of the cross product.
    type: Position
    default: Vector
  - name: Value
    description: The right-hand-side vector operand of the cross product.
    type: Position
    default: Vector
  return: Vector
  en-US: Cross Product
-
  description: The current array element being considered. Only meaningful during
    the evaluation of values such as filtered array and sorted array.
  return:
  - Object
  - Array
  en-US: Current Array Element
-
  description: The current array index being considered. Only meaningful during
    the evaluation of values such as filtered array and sorted array.
  return:
  - Object
  - Array
  en-US: Current Array Index
-
  description: The current game mode of the custom game.
  return: Gamemode
  en-US: Current Game Mode
-
  description: The current map of the custom game.
  return: Map
  en-US: Current Map
-
  description: ty magzie for adding that
  args:
  - name: String
    description: ''
    type: String
    default: '"Hello"'
  - name: "{0}"
    description: The value that will be converted to text and used to replace {0}.
    type: Object
    default: 'Null'
  - name: "{1}"
    description: The value that will be converted to text and used to replace {1}.
    type: Object
    default: 'Null'
  - name: "{2}"
    description: The value that will be converted to text and used to replace {2}.
    type: Object
    default: 'Null'
  return: String
  en-US: Custom String
-
  description: The unit-length direction vector corresponding to the specified angles.
  args:
  - name: Horizontal Angle
    description: The horizontal angle in degrees used to construct the resulting vector.
    type: Float
    default: Number
  - name: Vectical Angle
    description: The vertical angle in degrees used to construct the resulting vector.
    type: Float
    default: Number
  return: Direction
  en-US: Direction From Angles
-
  description: The unit-length direction vector from one position to another.
  args:
  - name: Start Pos
    description: The position from which the resulting direction vector will point.
    type: Position
    default: Vector
  - name: End Pos
    description: The position to which the resulting direction vector will point.
    type: Position
    default: Vector
  return: Direction
  en-US: Direction Towards
-
  description: The distance between two positions in meters.
  args:
  - name: Start Pos
    description: One of the two positions used in the distance measurement.
    type: Position
    default: Vector
  - name: End Pos
    description: One of the two positions used in the distance measurement.
    type: Position
    default: Vector
  return: Float
  en-US: Distance Between
-
  description: The ratio of two numbers or vectors. A vector divided by a number will
    yield a scaled vector. Division by zero results in zero.
  args_allow_null: true
  args:
  - name: Value
    description: The left-hand operand. May be any value that results in a number
      or a vector.
    type:
    - Float
    - Vector
    default: Number
  - name: Value
    description: The right-hand operand. May be any value that results in a number
      or a vector.
    type:
    - Float
    - Vector
    default: Number
  return:
  - Float
  - Vector
  en-US: Divide
-
  description: The dot product of the specified values.
  args:
  - name: Value
    description: One of two vector operands of the dot product.
    type: Position
    default: Vector
  - name: Value
    description: One of two vector operands of the dot product.
    type: Position
    default: Vector
  return: Float
  en-US: Dot Product
-
  description: Shorthand for the directional vector(0, -1, 0), which points downward.
  args:
  return:
    Direction:
    - Integer
    - Integer
    - Integer
  en-US: Down
-
  description: An array with no elements.
  return: Array
  en-US: Empty Array
-
  description: Whether the specified player, icon entity, or effect entity still exists.
    Useful for determining if a player has left the match or an entity has been destroyed.
  args:
  - name: Entity
    description: The player, icon entity, or effect entity whose existence to check.
    type:
    - Player
    - Entity ID
    default: Event Player
  return: Boolean
  en-US: Entity Exists
-
  description: The ability for the event currently being processed by this rule associated
    by button.
  args:
  return: Button
  en-US: Event Ability
-
  description: The amount of damage received by the victim for the event currently
    being processed by this rule.
  args:
  return: Float
  en-US: Event Damage
-
  description: The incoming direction for the event currently being processed by this
    rule.
  args:
  return: Direction
  en-US: Event Direction
-
  description: The amount of healing received by the healee for the event currently
    being processed by this rule.
  args:
  return: Float
  en-US: Event Healing
-
  description: The player executing this rule, as specified by the event. May be the
    same as the attacker or victim.
  args:
  return: Player
  en-US: Event Player
-
  description: Whether the damage was a critical hit (such as a headshot) for the
    event currently being processed by this rule.
  args:
  return: Boolean
  en-US: Event Was Critical Hit
-
  description: Whether the healing was a health pack for the event currently being
    processed by this rule.
  args:
  return: Boolean
  en-US: Event Was Health Pack
-
  description: The position of a player's first person view (used for aiming)
  args:
  - name: Player
    description: The position of a player's first person view (used for aiming)
    type: Player
    default: Event Player
  return: Vector
  en-US: Eye Position
-
  description: The unit-length directional vector of a player's current facing relative
    to the world. This value includes both horizontal and vertical facing.
  args:
  - name: Player
    description: The player whose facing direction to acquire.
    type: Player
    default: Event Player
  return: Direction
  en-US: Facing Direction Of
-
  description: The boolean value of false.
  args:
  return: Boolean
  en-US: 'False'
-
  description: The player farthest from a position, optionally restricted by team.
  args:
  - name: Center
    description: The position from which to measure distance.
    type: Position
    default: Vector
  - name: Team
    description: The team or teams from which the farthest player will come.
    type: Team
    default: Team
  return: Player
  en-US: Farthest Player From
-
  description: A copy of the specified array with any values that do not match the
    specified condition removed.
  args:
  - name: Array
    description: The array whose copy will be filtered.
    type: Array
    default: All Players
  - name: Condition
    description: The condition that is evaluated for each element of the copied array.
      If the condition is true, the element is kept in the copied array. Use the current
      array element value to reference the element of the array currently being considered.
    type: Boolean
    default: Compare
  return: Array
  en-US: Filtered Array
-
  description: The value at the start of the specified array. Results in 0 if the
    specified array is empty.
  args:
  - name: Array
    description: The array from which the value is acquired.
    type: Array
    default: Global Variable
  return:
  - Object
  - Array
  en-US: First Of
-
  description: The position of a specific team's flag in capture the flag.
  args:
  - name: Team
    description: The team whose flag position to acquire.
    type: Team
    default: Team
  return: Vector
  en-US: Flag Position
-
  description: Shorthand for the directional vector(0, 0, 1), which points forward.
  args:
  return:
    Direction:
    - Integer
    - Integer
    - Integer
  en-US: Forward
-
  return: Global Variable
  en-US: Global
-
  description: The current value of a global variable, which is a variable that belongs
    to the game itself.
  args:
  - name: Variable
    description: The variable whose value to acquire.
    type: Global Variable
    default: A
  return: Value
  en-US: Global Variable
-
  description: Whether an entity has spawned in the world. Results in false for players
    who have not chosen a hero yet.
  args:
  - name: Entity
    description: The player, icon entity, or effect entity whose presence in world
      to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Has Spawned
-
  description: Whether the specified player has the specified status, either from
    the set status action or from a non-scripted game mechanic.
  args:
  - name: Player
    description: The player whose status to check.
    type: Player
    default: Event Player
  - name: Status
    description: The status to check for.
    type: Status
    default: Hacked
  return: Boolean
  en-US: Has Status
-
  description: The player that received the healing for the event currently being
    processed by this rule. May be the same as the healer or the event player.
  args:
  return: Player
  en-US: Healee
-
  description: The player that dealt the healing for the event currently being processed
    by this rule. May be the same as the healee or the event player.
  args:
  return: Player
  en-US: Healer
-
  description: The current health of a player, including armor and shields.
  args:
  - name: Player
    description: The player whose health to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Health
-
  description: The current health of a player, including armor and shields, normalized
    between 0 and 1. (for example, 0 is no health, 0.5 is half health, 1 is full health,
    etc.)
  args:
  - name: Player
    description: The player whose normalized health to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Normalized Health
-
  description: A hero constant.
  args:
  - name: Hero
    description: A hero constant.
    type: Hero
    default: Ana
  return: Hero
  en-US: Hero
-
  description: The hero currently being duplicated by the specified player. If no
    hero is being duplicated, the resulting value is 0.
  args:
  - name: Player
    description: The player performing the duplication.
    type: Player
    default: Event Player
  return: Hero
  en-US: Hero Being Duplicated
-
  description: Converts a hero parameter into a string that shows up as an icon.
  args:
  - name: Value
    description: The hero that will be converted to an icon.
    type: Hero
    default: Hero
  return: String
  en-US: Hero Icon String
-
  description: The current hero of a player.
  args:
  - name: Player
    description: The player whose hero to acquire.
    type: Player
    default: Event Player
  return: Hero
  en-US: Hero Of
-
  description: The horizontal angle in degrees corresponding to the specified direction
    vector.
  args:
  - name: Direction
    description: The direction vector from which to acquire a horizontal angle in
      degrees. The vector is unitized before calculation begins.
    type: Direction
    default: Vector
  return: Float
  en-US: Horizontal Angle From Direction
-
  description: The horizontal angle in degrees from a player's current forward direction
    to the specified position. The result is positive if the position is on the player's
    left. Otherwise, the result is zero or negative.
  args:
  - name: Player
    description: The player from whose current facing the angle begins.
    type: Player
    default: Event Player
  - name: Position
    description: The position in the world where the angle ends.
    type: Position
    default: Vector
  return: Float
  en-US: Horizontal Angle Towards
-
  description: A game mode constant.
  args:
  - name: Game Mode
    description: A game mode constant.
    type: Gamemode
    default: Assault
  return: Gamemode
  en-US: Game Mode
-
  description: The horizontal angle in degrees of a player's current facing relative
    to the world. This value increases as the player rotates to the left (wrapping
    around at +/- 180).
  args:
  - name: Player
    description: The player whose horizontal facing angle to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Horizontal Facing Angle Of
-
  description: The current horizontal speed of a player in meters per second. This
    measurement excludes all vertical motion.
  args:
  - name: Player
    description: The player whose horizontal speed to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Horizontal Speed Of
-
  description: The player that is currently the host of the custom game. This value
    will change if the current host player leaves the match.
  args:
  return: Player
  en-US: Host Player
-
  description: Allows you to use an icon inside of a string.
  args:
  - name: Icon
    description: The icon to display.
    type: Icon
    default: 'Arrow: Down'
  return: String
  en-US: Icon String
-
  description: Results in the Then value when the If condition is true; otherwise,
    results in the Else value.
  args:
  - name: If
    description: If this condition evaluates to true, the result of the value is then;
      otherwise, the result is else.
    type: Boolean
    default: 'True'
  - name: Then
    description: The result of the value when the if condition evaluates to true.
    type:
    - Object
    - Array
    default: Number
  - name: Else
    description: The result of the value when the if condition evaluates to false.
    type:
    - Object
    - Array
    default: Number
  return:
  - Object
  - Array
  en-US: If-Then-Else
-
  description: The index of a value within an array or -1 if no such value can be
    found.
  args:
  - name: Array
    description: The array in which to search for the specified value.
    type:
      Array: Object
    default: All Players
  - name: Value
    description: The value for which to search.
    type: Object
    default: Number
  return: Integer
  en-US: Index Of Array Value
-
  description: Whether a player is alive.
  args:
  - name: Player
    description: The player whose life to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Alive
-
  description: Whether the match is currently in its assemble heroes phase.
  return: Boolean
  en-US: Is Assembling Heroes
-
  description: Whether the match is between rounds.
  return: Boolean
  en-US: Is Between Rounds
-
  description: Whether a player is holding a specific button.
  args:
  - name: Player
    description: The player whose button to check.
    type: Player
    default: Event Player
  - name: Button
    description: The button to check.
    type: Button
    default: Primary Fire
  return: Boolean
  en-US: Is Button Held
-
  description: Whether a player is using a specific communication type (such as emoting,
    using a voice line, etc.).
  args:
  - name: Player
    description: The player whose communication status to check.
    type: Player
    default: Event Player
  - name: Type
    description: The type of communication to consider. The duration of emotes is
      exact, the duration of voice lines is assumed to be 4 seconds, and all other
      durations are assumed to be 2 seconds.
    type: Comms
    default: Voice Line Up
  return: Boolean
  en-US: Is Communicating
-
  description: Whether a player is using any communication type (such as emoting,
    using a voice line, etc.).
  args:
  - name: Player
    description: The player whose communication status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Communicating Any
-
  description: Whether a player is using an emote.
  args:
  - name: Player
    description: The player whose emoting status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Communicating Any Emote
-
  description: Whether a player is using a voice line. (The duration of voice lines
    is assumed to be 4 seconds.)
  args:
  - name: Player
    description: The player whose voice line status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Communicating Any Voice line
-
  description: Whether the point is locked in control mode.
  return: Boolean
  en-US: Is Control Mode Point Locked
-
  description: Whether a player is crouching.
  args:
  - name: Player
    description: The player whose crouching status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Crouching
-
  description: "Whether the specified player is currently in an alternate form:\n
    \       \n- Hammond's ball form\n- Baby Dva\n- Bastion's turret and tank forms\n-
    Lucio's speed song\n- Mercy's pistol\n- Torbjorn's hammer\n\nFor Echo duplication,
    use the Is Duplicating value instead."
  args:
  - name: Player
    description: The player whose form to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is In Alternate Form
-
  description: Whether the current game of capture the flag is in sudden death.
  return: Boolean
  en-US: Is CTF Mode In Sudden Death
-
  description: Whether a player is dead.
  args:
  - name: Player
    description: The player whose death to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Dead
-
  description: Whether a player is a dummy bot.
  args:
  - name: Player
    description: Player to consider.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Dummy Bot
-
  description: Whether the specified player is duplicating another hero. To check
    which hero, use the Hero Being Duplicated value.
  args:
  - name: Player
    description: The player whose duplication status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Duplicating
-
  description: Whether the specified player's primary weapon attack is being used.
  args:
  - name: Player
    description: The player whose primary weapon attack usage to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Firing Primary
-
  description: Whether the specified player's secondary weapon attack is being used.
  args:
  - name: Player
    description: The player whose secondary weapon attack usage to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Firing Secondary
-
  description: Whether a specific team's flag is at its base in capture the flag.
  args:
  - name: Team
    description: The team whose flag to check.
    type: Team
    default: Team
  return: Boolean
  en-US: Is Flag At Base
-
  description: Whether a specific team's flag is being carried by a member of the
    opposing team in capture the flag.
  args:
  - name: Team
    description: The team whose flag to check.
    type: Team
    default: Team
  return: Boolean
  en-US: Is Flag Being Carried
-
  description: Whether the main phase of the match is in progress (during which time
    combat and scoring are allowed).
  return: Boolean
  en-US: Is Game In Progress
-
  description: Whether a specific hero is being played (either on a team or in the
    match).
  args:
  - name: Hero
    description: The hero to check for play.
    type: Hero
    default: Hero
  - name: Team
    description: The team or teams on which to check for the hero being played.
    type: Team
    default: Team
  return: Boolean
  en-US: Is Hero Being Played
-
  description: Whether a player is airborne.
  args:
  - name: Player
    description: The player whose airborne status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is In Air
-
  description: Whether two positions have line of sight with each other.
  args:
  - name: Start Pos
    description: The start position for the line-of-sight check. If a player is provided,
      a position 2 meters above the player's feet is used.
    type:
    - Position
    - Player
    default: Vector
  - name: End Pos
    description: The end position for the line-of-sight check. If a player is provided,
      a position 2 meters above the player's feet is used.
    type:
    - Position
    - Player
    default: Vector
  - name: Barriers
    description: Defines how barriers affect line of sight. When considering whether
      a barrier belongs to an enemy, the allegiance of the player provided to start
      pos (if any) is used.
    type: BarrierLos
    default: Barriers DO NOT BLOCK LOS
  return: Boolean
  en-US: Is In Line of Sight
-
  description: Whether the match is currently in its setup phase.
  return: Boolean
  en-US: Is In Setup
-
  description: Whether a specific player is in the spawn room (and is thus being healed
    and able to change heroes).
  args:
  - name: Player
    description: The player whose spawn room status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is In Spawn Room
-
  description: Whether a location is within view of a player.
  args:
  - name: Player
    description: The player whose view to use for the check.
    type: Player
    default: Event Player
  - name: Location
    description: The location to test if it's within view.
    type: Position
    default: Vector
  - name: View Angle
    description: The view angle to compare against in degrees.
    type: Float
    default: Number
  return: Boolean
  en-US: Is In View Angle
-
  description: Whether the specified player is jumping.
  args:
  - name: Player
    description: The player whose jump usage to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Jumping
-
  description: Whether the match has finished.
  return: Boolean
  en-US: Is Match Complete
-
  description: Whether the specified player is meleeing.
  args:
  - name: Player
    description: The player whose melee usage to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Meleeing
-
  description: Whether a player is moving (defined as having a nonzero current speed).
  args:
  - name: Player
    description: The player whose moving status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Moving
-
  description: Whether the specified objective has been completed. Results in false
    if the game mode is not assault, escort, or assault/escort.
  args:
  - name: Number
    description: The index of the objective to consider, starting at 0 and counting
      up. Each control point, payload checkpoint, and payload destination has its
      own index.
    type: Integer
    default: Number
  return: Boolean
  en-US: Is Objective Complete
-
  description: Whether a player is on the ground (or other walkable surface).
  args:
  - name: Player
    description: The player whose ground status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is On Ground
-
  description: Whether a specific player is currently occupying a payload or capture
    point.
  args:
  - name: Player
    description: The player whose objective status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is On Objective
-
  description: Whether a player is on a wall (climbing or riding).
  args:
  - name: Player
    description: The player whose wall status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is On Wall
-
  description: Whether a specific player's portrait is on fire.
  args:
  - name: Player
    description: The player whose portrait to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Portrait On Fire
-
  description: Whether a player is standing (defined as both not moving and not in
    the air).
  args:
  - name: Player
    description: The player whose standing status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Standing
-
  description: Whether the specified team is currently on defense. Results in false
    if the game mode is not assault, escort, or assault/escort.
  args:
  - name: Team
    description: The team whose role to check.
    type: Team
    default: Team
  return: Boolean
  en-US: Is Team On Defense
-
  description: Whether the specified team is currently on offense. Results in false
    if the game mode is not assault, escort, or assault/escort.
  args:
  - name: Team
    description: The team whose role to check.
    type: Team
    default: Team
  return: Boolean
  en-US: Is Team On Offense
-
  description: Whether the specified condition evaluates to true for every value in
    the specified array.
  args:
  - name: Array
    description: The array whose values will be considered.
    type: Array
    default: Global Variable
  - name: Condition
    description: The condition that is evaluated for each element of the specified
      array. Use the current array element value to reference the element of the array
      currently being considered.
    type: Boolean
    default: Compare
  return: Boolean
  en-US: Is True For All
-
  description: Whether the specified condition evaluates to true for any value in
    the specified array.
  args:
  - name: Array
    description: The array whose values will be considered.
    type: Array
    default: Global Variable
  - name: Condition
    description: The condition that is evaluated for each element of the specified
      array. Use the current array element value to reference the element of the array
      currently being considered.
    type: Boolean
    default: Compare
  return: Boolean
  en-US: Is True For Any
-
  description: Whether the specified player is using ability 1.
  args:
  - name: Player
    description: The player whose ability 1 usage to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Using Ability 1
-
  description: Whether the specified player is using ability 2.
  args:
  - name: Player
    description: The player whose ability 2 usage to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Using Ability 2
-
  description: Whether a player is using an ultimate ability.
  args:
  - name: Player
    description: The player whose ultimate ability usage to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Using Ultimate
-
  description: Whether the match is waiting for players to join before starting.
  return: Boolean
  en-US: Is Waiting For Players
-
  description: A reference to the last effect or icon entity created by the event
    player (or created at the global level).
  return: Entity ID
  en-US: Last Created Entity
-
  description: An id representing the most recent start damage modification action
    that was executed by the event player (or executed at the global level).
  return: Damage Modification ID
  en-US: Last Damage Modification ID
-
  description: An id representing the most recent damage over time action that was
    executed by the event player (or executed at the global level).
  return: Damage Over Time ID
  en-US: Last Damage Over Time ID
-
  description: An id representing the most recent heal over time action that was executed
    by the event player (or executed at the global level).
  return: Heal Over Time ID
  en-US: Last Heal Over Time ID
-
  description: An id representing the most recent start healing modification action
    that was executed by the event player (or executed at the global level).
  return: Healing Modification ID
  en-US: Last Healing Modification ID
-
  description: The value at the end of the specified array. Results in 0 if the specified
    array is empty.
  args:
  - name: Array
    description: The array from which the value is acquired.
    type: Array
    default: Global Variable
  return:
  - Object
  - Array
  en-US: Last Of
-
  description: A reference to the last piece of text created by the event player (or
    created at the global level) via the create hud text or create in-world text action.
  return: Text ID
  en-US: Last Text ID
-
  description: Shorthand for the directional vector(1, 0, 0), which points to the
    left.
  args:
  return:
    Direction:
    - Integer
    - Integer
    - Integer
  en-US: Left
-
  description: The vector in local coordinates corresponding to the provided vector
    in world coordinates.
  args:
  - name: World Vector
    description: The vector in world coordinates that will be converted to local coordinates.
    type: Position
    default: Vector
  - name: Relative Player
    description: The player to whom the resulting vector will be relative.
    type: Player
    default: Event Player
  - name: Transformation
    description: Specifies whether the vector should receive a rotation and a translation
      (usually applied to positions) or only a rotation (usually applied to directions
      and velocities).
    type: Transform
    default: Rotation
  return: Vector
  en-US: Local Vector Of
-
  description: A map constant.
  args:
  - name: Map
    description: A map constant.
    type: Map
    default: Ayuttahaya
  return: Map
  en-US: Map
  es-ES: Mapa
  it-IT: Mappa
  pl-PL: Mapa
  zh-TW: 地圖
-
  description: The current round of the match, counting up from 1.
  return: Integer
  en-US: Match Round
-
  description: The amount of time in seconds remaining in the current game mode phase.
  return: Float
  en-US: Match Time
-
  description: The greater of two numbers.
  args:
  - name: Value
    description: The left-hand operand. May be any value that results in a number.
    type: Float
    default: Number
  - name: Value
    description: The right-hand operand. May be any value that results in a number.
    type: Float
    default: Number
  return: Float
  en-US: Max
-
  description: The max health of a player, including armor and shields.
  args:
  - name: Player
    description: The player whose max health to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Max Health
-
  description: The lesser of two numbers.
  args:
  - name: Value
    description: The left-hand operand. May be any value that results in a number.
    type: Float
    default: Number
  - name: Value
    description: The right-hand operand. May be any value that results in a number.
    type: Float
    default: Number
  return: Float
  en-US: Min
-
  description: The remainder of the left-hand operand divided by the right-hand operand.
    Any number modulo zero results in zero.
  args:
  - name: Value
    description: The left-hand operand. May be any value that results in a number.
    type: Float
    default: Number
  - name: Value
    description: The right-hand operand. May be any value that results in a number.
    type: Float
    default: Number
  return: Float
  en-US: Modulo
-
  description: The product of two numbers or vectors. A vector multiplied by a number
    will yield a scaled vector.
  args_allow_null: true
  args:
  - name: Value
    description: The left-hand operand. May be any value that results in a number
      or a vector.
    type:
    - Float
    - Vector
    default: Number
  - name: Value
    description: The right-hand operand. May be any value that results in a number
      or a vector.
    type:
    - Float
    - Vector
    default: Number
  return:
  - Float
  - Vector
  en-US: Multiply
-
  description: The position closest to the specified position that can be stood on
    and is accessible from a spawn point.
  args:
  - name: Position
    description: The position from which to search for the nearest walkable position.
    type: Position
    default: Vector
  return: Vector
  en-US: Nearest Walkable Position
-
  description: The unit-length normalization of a vector.
  args:
  - name: Vector
    description: The vector to normalize.
    type: Position
    default: Vector
  return: Vector
  en-US: Normalize
-
  description: Whether the input is false (or equivalent to false).
  args:
  - name: Value
    description: When this input is false (or equivalent to false), then the not value
      is true. Otherwise, the not value is false.
    type: Boolean
    default: 'True'
  return: Boolean
  en-US: Not
-
  description: The absence of a player. Used when no player is desired for a particular
    input. Equivalent to the real number 0 for the purposes of comparison and debugging.
  args:
  return: Player
  en-US: 'Null'
-
  description: The number of dead players on a team or in the match.
  args:
  - name: Team
    description: The team or teams on which to count players.
    type: Team
    default: Team
  return: Integer
  en-US: Number of Dead Players
-
  description: The number of deaths a specific player has earned. This value only
    accumulates while a game is in progress.
  args:
  - name: Player
    description: The player whose death count to acquire.
    type: Player
    default: Event Player
  return: Integer
  en-US: Number of Deaths
-
  description: The number of eliminations a specific player has earned. This value
    only accumulates while a game is in progress.
  args:
  - name: Player
    description: The player whose elimination count to acquire.
    type: Player
    default: Event Player
  return: Integer
  en-US: Number of Eliminations
-
  description: The number of final blows a specific player has earned. This value
    only accumulates while a game is in progress.
  args:
  - name: Player
    description: The player whose final blow count to acquire.
    type: Player
    default: Event Player
  return: Integer
  en-US: Number of Final Blows
-
  description: The number of players playing a specific hero on a team or in the match.
  args:
  - name: Hero
    description: The hero to check for play.
    type: Hero
    default: Hero
  - name: Team
    description: The team or teams on which to check for the hero being played.
    type: Team
    default: Team
  return: Integer
  en-US: Number of Heroes
-
  description: The number of living players on a team or in the match.
  args:
  - name: Team
    description: The team or teams on which to count players.
    type: Team
    default: Team
  return: Integer
  en-US: Number of Living Players
-
  description: The number of players on a team or in the match.
  args:
  - name: Team
    description: The team or teams on which to count players.
    type: Team
    default: Team
  return: Integer
  en-US: Number of Players
-
  description: The number of players occupying a payload or control point (either
    on a team or in the match).
  args:
  - name: Team
    description: The team or teams on which to count players.
    type: Team
    default: Team
  return: Integer
  en-US: Number of Players On Objective
-
  description: The control point, payload checkpoint, or payload destination currently
    active (either 0, 1, or 2). Valid in assault, assault/escort, escort, and control.
  return: Integer
  en-US: Objective Index
-
  description: The position in the world of the specified objective (either a control
    point, a payload checkpoint, or a payload destination). Valid in assault, assault/escort,
    escort, and control.
  args:
  - name: Number
    description: The index of the objective to consider, starting at 0 and counting
      up. Each control point, payload checkpoint, and payload destination has its
      own index.
    type: Integer
    default: Number
  return: Integer
  en-US: Objective Position
-
  description: The team opposite the specified team.
  args:
  - name: Team
    description: The team whose opposite to acquire. If all, the result will be all.
    type: Team
    default: Team
  return: Team
  en-US: Opposite Team Of
-
  description: Whether either of the two inputs are true (or equivalent to true).
  args:
  - name: Value
    description: One of the two inputs considered. If either one is true (or equivalent
      to true), then the or value is true.
    type: Boolean
    default: 'True'
  - name: Value
    description: One of the two inputs considered. If either one is true (or equivalent
      to true), then the or value is true.
    type: Boolean
    default: 'True'
  return: Boolean
  en-US: Or
-
  description: The position in the world of the active payload.
  return: Vector
  en-US: Payload Position
-
  description: The current progress towards the destination for the active payload
    (expressed as a percentage).
  return: Float
  en-US: Payload Progress Percentage
-
  description: The player carrying a particular team's flag in capture the flag. Results
    in null if no player is carrying the flag.
  args:
  - name: Team
    description: The team whose flag to check.
    type: Team
    default: Team
  return: Player
  en-US: Player Carrying Flag
-
  description: The player closest to the reticle of the specified player, optionally
    restricted by team.
  args:
  - name: Player
    description: The player from whose reticle to search for the closest player.
    type: Player
    default: Event Player
  - name: Team
    description: The team or teams on which to search for the closest player.
    type: Team
    default: Team
  return: Player
  en-US: Player Closest To Reticle
-
  description: The current value of a player variable, which is a variable that belongs
    to a specific player.
  args:
  - name: Player
    description: The player whose variable value to acquire.
    type: Player
    default: Event Player
  - name: Variable
    description: The variable whose value to acquire.
    type: Player Variable
    default: A
  return: Value
  en-US: Player Variable
-
  description: The player or array of players who occupy a specific slot in the game.
  args:
  - name: Slot
    description: The slot number from which to acquire a player or players. In team
      games, each team has slots 0 through 5. In free-for-all games, slots are numbered
      0 through 11.
    type: Integer
    default: Number
  - name: Team
    description: The team or teams from which to acquire a player or players.
    type: Team
    default: Team
  return:
  - Player
  - Array: Player
  en-US: Players In Slot
-
  description: The players who are within a specific view angle of a specific player's
    reticle, optionally restricted by team.
  args:
  - name: Player
    description: The player whose view to use for the check.
    type: Player
    default: Event Player
  - name: Team
    description: The team or teams on which to consider players.
    type: Team
    default: Team
  - name: View Angle
    description: The view angle to compare against in degrees.
    type: Float
    default: Number
  return:
    Array: Player
  en-US: Players in View Angle
-
  description: The array of players playing a specific hero on a team or in the match.
  args:
  - name: Hero
    description: The hero to check for play.
    type: Hero
    default: Hero
  - name: Team
    description: The team or teams on which to check for the hero being played.
    type: Team
    default: Team
  return:
    Array: Player
  en-US: Players On Hero
-
  description: An array containing all players within a certain distance of a position,
    optionally restricted by team and line of sight.
  args:
  - name: Center
    description: The center position from which to measure distance.
    type: Position
    default: Vector
  - name: Radius
    description: The radius in meters inside which players must be in order to be
      included in the resulting array.
    type: Float
    default: Number
  - name: Team
    description: The team or teams to which a player must belong to be included in
      the resulting array.
    type: Team
    default: Team
  - name: LOS CHECK
    description: Specifies whether and how a player must pass a line-of-sight check
      to be included in the resulting array.
    type: LosCheck
    default: 'OFF'
  return:
    Array: Player
  en-US: Players Within Radius
-
  description: The current progress towards capture for the active control point (expressed
    as a percentage).
  return: Float
  en-US: Point Capture Percentage
-
  description: The current position of a player as a vector.
  args:
  - name: Player
    description: The player whose position to acquire.
    type: Player
    default: Event Player
  return: Vector
  en-US: Position Of
-
  description: The left-hand operand raised to the power of the right-hand operand.
    If the left-hand operand is negative, the result is always zero.
  args:
  - name: Value
    description: The left-hand operand. May be any value that results in a number.
    type: Float
    default: Number
  - name: Value
    description: The right-hand operand. May be any value that results in a number.
    type: Float
    default: Number
  return: Float
  en-US: Raise To Power
-
  description: A random integer between the specified min and max, inclusive.
  args:
  - name: Min
    description: The smallest integer allowed. If a real number is provided to this
      input, it is rounded to the nearest integer.
    type: Integer
    default: Number
  - name: Max
    description: The largest integer allowed. If a real number is provided to this
      input, it is rounded to the nearest integer.
    type: Integer
    default: Number
  return: Integer
  en-US: Random Integer
-
  description: A random real number between the specified min and max.
  args:
  - name: Min
    description: The smallest real number allowed.
    type: Float
    default: Number
  - name: Max
    description: The largest real number allowed.
    type: Float
    default: Number
  return: Float
  en-US: Random Real
-
  description: A random value from the specified array.
  args:
  - name: Array
    description: The array from which to randomly take a value. If a non-array value
      is provided, the result is simply the provided value.
    type: Array
    default: Global Variable
  return:
  - Object
  - Array
  en-US: Random Value In Array
-
  description: A copy of the specified array with the values in a random order.
  args:
  - name: Array
    description: The array whose copy will be randomized.
    type: Array
    default: Global Variable
  return: Array
  en-US: Randomized Array
-
  description: The surface normal at the ray cast hit position (or from end pos to
    start pos if no hit occurs).
  args:
  - name: Start Pos
    description: The start position for the ray cast. If a player is provided, a position
      2 meters above the player's feet is used.
    type: Position
    default: Vector
  - name: End Pos
    description: The end position for the ray cast. If a player is provided, a position
      2 meters above the player's feet is used.
    type: Position
    default: Vector
  - name: Players To Include
    description: Which players can be hit by this ray cast.
    type:
      Array: Player
    default: All Players
  - name: Players To Exclude
    description: Which players cannot be hit by this ray cast. This list takes precedence
      over players to include.
    type:
      Array: Player
    default: Event Player
  - name: Include Player Owned Objects
    description: Whether player-owned objects (such as barriers or turrets) should
      be included in the ray cast.
    type: Boolean
    default: 'True'
  return: Direction
  en-US: Ray Cast Hit Normal
-
  description: The player hit by the ray cast (or null if no player is hit).
  args:
  - name: Start Pos
    description: The start position for the ray cast. If a player is provided, a position
      2 meters above the player's feet is used.
    type: Position
    default: Vector
  - name: End Pos
    description: The end position for the ray cast. If a player is provided, a position
      2 meters above the player's feet is used.
    type: Position
    default: Vector
  - name: Players To Include
    description: Which players can be hit by this ray cast.
    type:
      Array: Player
    default: All Players
  - name: Players To Exclude
    description: Which players cannot be hit by this ray cast. This list takes precedence
      over players to include.
    type:
      Array: Player
    default: Event Player
  - name: Include Player Owned Objects
    description: Whether player-owned objects (such as barriers or turrets) should
      be included in the ray cast.
    type: Boolean
    default: 'True'
  return: Player
  en-US: Ray Cast Hit Player
-
  description: The position where the ray cast hits a surface, object, or player (or
    the end pos if no hit occurs).
  args:
  - name: Start Pos
    description: The start position for the ray cast. If a player is provided, a position
      2 meters above the player's feet is used.
    type: Position
    default: Vector
  - name: End Pos
    description: The end position for the ray cast. If a player is provided, a position
      2 meters above the player's feet is used.
    type: Position
    default: Vector
  - name: Players To Include
    description: Which players can be hit by this ray cast.
    type:
      Array: Player
    default: All Players
  - name: Players To Exclude
    description: Which players cannot be hit by this ray cast. This list takes precedence
      over players to include.
    type:
      Array: Player
    default: Event Player
  - name: Include Player Owned Objects
    description: Whether player-owned objects (such as barriers or turrets) should
      be included in the ray cast.
    type: BooleanValue
    default: 'True'
  return: Vector
  en-US: Ray Cast Hit Position
-
  description: A copy of an array with one or more values removed (if found).
  args_allow_null: true
  args:
  - name: Array
    description: The array from which to remove values.
    type: Array
    default: All Players
  - name: Value
    description: The value to remove from the array (if found). If this value is itself
      an array, each matching element is removed.
    type:
    - Object
    - Array
    default: Number
  return: Array
  en-US: Remove From Array
-
  description: Shorthand for the directional vector(-1, 0, 0), which points to the
    right.
  args:
  return:
    Direction:
    - Integer
    - Integer
    - Integer
  en-US: Right
-
  description: The integer to which the specified value rounds.
  args:
  - name: Value
    description: The real number to round.
    type: Float
    default: Number
  - name: Rounding Type
    description: Determines the direction in which the value will be rounded.
    type: Rounding
    default: UP
  return: Integer
  en-US: Round To Integer
-
  description: The current score of a player. Results in 0 if the game mode is not
    free-for-all.
  args:
  - name: Player
    description: The player whose score to acquire.
    type: Player
    default: Event Player
  return: Integer
  en-US: Score Of
-
  description: Provides a percentage representing the CPU load of the current game
    instance. As this number approaches or exceeds 100, it becomes increasingly likely
    that the instance will be shut down because it is consuming too many resources.
  return: Float
  en-US: Server Load
-
  description: Provides a percentage representing the average CPU load of the current
    game instance over the last two seconds. As this number approaches or exceeds
    100, it becomes increasingly likely that the instance will be shut down because
    it is consuming too many resources.
  return: Float
  en-US: Server Load Average
-
  description: Provides a percentage representing the highest CPU load of the current
    game instance over the last two seconds. As this number approaches or exceeds
    100, it becomes increasingly likely that the instance will be shut down because
    it is consuming too many resources.
  return: Float
  en-US: Server Load Peak
-
  description: Sine of the specified angle in degrees.
  args:
  - name: Angle
    description: Angle in degrees.
    type: Float
    default: Number
  return: Float
  en-US: Sine From Degrees
-
  description: Sine of the specified angle in radians.
  args:
  - name: Angle
    description: Angle in radians.
    type: Float
    default: Number
  return: Float
  en-US: Sine From Radians
-
  description: The slot number of the specified player. In team games, each team has
    slots 0 through 5. In free-for-all games, slots are numbered 0 through 11.
  args:
  - name: Player
    description: The player whose slot number to acquire.
    type: Player
    default: Event Player
  return: Integer
  en-US: Slot Of
-
  description: A copy of the specified array with the values sorted according to the
    value rank that is evaluated for each element.
  args:
  - name: Array
    description: The array whose copy will be sorted.
    type:
      Array: Object
    default: Global Variable
  - name: Value Rank
    description: The value that is evaluated for each element of the copied array.
      The array is sorted by this rank in ascending order. Use the current array element
      value to reference the element of the array currently being considered.
    type: Object
    default: Current Array Element
  return:
    Array: Object
  en-US: Sorted Array
-
  description: A copy of the specified array with the values mapped according to the Mapping Expression that is evaluated for each element.
  args:
  - name: Array
    description: The array whose copy will be sorted.
    type:
      Array: Object
    default: Global Variable
  - name: Mapping expression
    description: The mapping expression that is evaluated for each element of the copied array. Use the Current Array Element value to reference the element of the array currently being considered.
    type: Object
    default: Current Array Element
  return:
    Array: Object
  en-US: Mapped Array
-
  description: The current speed of a player in meters per second.
  args:
  - name: Player
    description: The player whose speed to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Speed Of
-
  description: The current speed of a player in a specific direction in meters per
    second.
  args:
  - name: Player
    description: The player whose speed to acquire.
    type: Player
    default: Event Player
  - name: Direction
    description: The direction of travel in which to measure the player's speed.
    type: Direction
    default: Vector
  return: Float
  en-US: Speed Of In Direction
-
  description: The square root of the specified value.
  args:
  - name: Value
    description: The real number value whose square root will be computed. Negative
      values result in zero.
    type: Float
    default: Number
  return: Float
  en-US: Square Root
-
  description: Text formed from a selection of strings and specified values.
  args:
  - name: String
    description: ''
    type: String
    default: Hello
  - name: "{0}"
    description: The value that will be converted to text and used to replace {0}.
    type: Object
    default: 'Null'
  - name: "{1}"
    description: The value that will be converted to text and used to replace {1}.
    type: Object
    default: 'Null'
  - name: "{2}"
    description: The value that will be converted to text and used to replace {2}.
    type: Object
    default: 'Null'
  return: String
  en-US: String
-
  description: The difference between two numbers or vectors.
  args_allow_null: true
  args:
  - name: Value
    description: The left-hand operand. May be any value that results in a number
      or a vector.
    type:
    - Float
    - Vector
    default: Number
  - name: Value
    description: The right-hand operand. May be any value that results in a number
      or a vector.
    type:
    - Float
    - Vector
    default: Number
  return:
  - Float
  - Vector
  en-US: Subtract
-
  description: Tangent of the specified angle in degrees.
  args:
  - name: Angle
    description: Angle in degrees.
    type: Float
    default: Number
  return: Float
  en-US: Tangent From Degrees
-
  description: Tangent of the specified angle in radians.
  args:
  - name: Angle
    description: Angle in radians.
    type: Float
    default: Number
  return: Float
  en-US: Tangent From Radians
-
  description: The team of a player. If the game mode is free-for-all, the team is
    considered to be all.
  args:
  - name: Player
    description: The player whose team to acquire.
    type: Player
    default: Event Player
  return: Team
  en-US: Team Of
-
  description: The current score for the specified team. Results in 0 in free-for-all
    game modes.
  args:
  - name: Team
    description: The team whose score to acquire.
    type: Team
    default: Team
  return: Integer
  en-US: Team Score
-
  description: The directional input of a player, represented by a vector with horizontal
    input on the x component (positive to the left) and vertical input on the z component
    (positive upward).
  args:
  - name: Player
    description: The player whose directional input to acquire.
    type: Player
    default: Event Player
  return: Direction
  en-US: Throttle Of
-
  description: The total time in seconds that have elapsed since the game instance
    was created (including setup time and transitions).
  return: Float
  en-US: Total Time Elapsed
-
  description: The boolean value of true.
  args:
  return: Boolean
  en-US: 'True'
-
  description: The current ultimate ability charge percentage of a player.
  args:
  - name: Player
    description: The player whose ultimate charge percentage to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Ultimate Charge Percent
-
  description: Shorthand for the directional vector(0, 1, 0), which points upward.
  args:
  return:
    Direction:
    - Integer
    - Integer
    - Integer
  en-US: Up
-
  description: The value found at a specific element of an array. Results in 0 if
    the element does not exist.
  args:
  - name: Array
    description: The array whose element to acquire.
    type: Array
    default: Global Variable
  - name: Index
    description: The index of the element to acquire.
    type: Integer
    default: Number
  return:
  - Object
  - Array
  en-US: Value In Array
-
  description: A vector composed of three real numbers (x, y, z) where x is left,
    y is up, and z is forward. Vectors are used for position, direction, and velocity.
  args:
  - name: X
    description: The x value of the vector.
    type: Float
    default: Number
  - name: Y
    description: The y value of the vector.
    type: Float
    default: Number
  - name: Z
    description: The z value of the vector.
    type: Float
    default: Number
  return: Vector
  en-US: Vector
-
  description: The displacement vector from one position to another.
  args:
  - name: Start Pos
    description: The position from which the resulting displacement vector begins.
    type: Position
    default: Vector
  - name: End Pos
    description: The position at which the resulting displacement vector ends.
    type: Position
    default: Vector
  return: Direction
  en-US: Vector Towards
-
  description: The current velocity of a player as a vector. If the player is on a
    surface, the y component of this velocity will be 0, even when traveling up or
    down a slope.
  args:
  - name: Player
    description: The player whose velocity to acquire.
    type: Player
    default: Event Player
  return: Velocity
  en-US: Velocity Of
-
  description: The vertical angle in degrees corresponding to the specified direction
    vector.
  args:
  - name: Direction
    description: The direction vector from which to acquire a vertical angle in degrees.
      The vector is unitized before calculation begins.
    type: Direction
    default: Vector
  return: Float
  en-US: Vertical Angle From Direction
-
  description: The vertical angle in degrees from a player's current forward direction
    to the specified position. The result is positive if the position is below the
    player. Otherwise, the result is zero or negative.
  args:
  - name: Player
    description: The player from whose current facing the angle begins.
    type: Player
    default: Event Player
  - name: Position
    description: The position in the world where the angle ends.
    type: Position
    default: Vector
  return: Float
  en-US: Vertical Angle Towards
-
  description: The vertical angle in degrees of a player's current facing relative
    to the world. This value increases as the player looks down.
  args:
  - name: Player
    description: The player whose vertical facing angle to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Vertical Facing Angle Of
-
  description: The current vertical speed of a player in meters per second. This measurement
    excludes all horizontal motion, including motion while traveling up and down slopes.
  args:
  - name: Player
    description: The player whose vertical speed to acquire.
    type: Player
    default: Event Player
  return: Float
  en-US: Vertical Speed Of
-
  description: The player that received the damage for the event currently being processed
    by this rule. May be the same as the attacker or the event player.
  args:
  return: Player
  en-US: Victim
-
  description: The vector in world coordinates corresponding to the provided vector
    in local coordinates.
  args:
  - name: Local Vector
    description: The vector in local coordinates that will be converted to world coordinates.
    type: Position
    default: Vector
  - name: Relative Player
    description: The player to whom the local vector is relative.
    type: Player
    default: Event Player
  - name: Transformation
    description: Specifies whether the vector should receive a rotation and a translation
      (usually applied to positions) or only a rotation (usually applied to directions
      and velocities).
    type: Transform
    default: Rotation
  return: Vector
  en-US: World Vector Of
-
  description: The x component of the specified vector, usually representing a leftward
    amount.
  args:
  - name: Value
    description: The vector from which to acquire the x component.
    type: Position
    default: Vector
  return: Float
  en-US: X Component Of
-
  description: The y component of the specified vector, usually representing an upward
    amount.
  args:
  - name: Value
    description: The vector from which to acquire the y component.
    type: Position
    default: Vector
  return: Float
  en-US: Y Component Of
-
  description: The z component of the specified vector, usually representing a forward
    amount.
  args:
  - name: Value
    description: The vector from which to acquire the z component.
    type: Position
    default: Vector
  return: Float
  en-US: Z Component Of
-
  description: The ability charge count for a player associated by button.
  args:
  - name: Player
    description: The player whose ability to check.
    type: Player
    default: Event Player
  - name: Button
    description: The ability to check associated by button.
    type: Button
    default: Button
  return: Integer
  en-US: Ability Charge
-
  description: The ability resource percent for a player associated by button.
  args:
  - name: Player
    description: The player whose ability to check.
    type: Player
    default: Event Player
  - name: Button
    description: The ability to check associated by button.
    type: Button
    default: Button
  return: Float
  en-US: Ability Resource
-
  description: The current ammo of a player.
  args:
  - name: Player
    description: The player whose ammo to acquire.
    type: Player
    default: Event Player
  - name: Clip
    description: The index of the clip to be acquired. 0 is the first clip, and 1 is the second. If the specified type does not exist, this will return 0.
    type: Integer
    default: 0
  return: Float
  en-US: Ammo
-
  description: Whether the elimination was due to the environment for the event currently
    being processed by this rule.
  args:
  return: Boolean
  en-US: Event Was Environment
-
  description: The current health of the specified player, filtered by the given health
    type.
  args:
  - name: Player
    description: The player whose health to acquire.
    type: Player
    default: Event Player
  - name: Health
    description: The type of health to acquire.
    type: Health
    default: Health
  return: Float
  en-US: Health Of Type
-
  description: Converts a button parameter into a string that shows up based on the
    player's input bindings. This value cannot be stored in variables.
  args:
  - name: Button
    description: The button for the input binding that will be converted to a string.
    type: Button
    default: Button
  return: String
  en-US: Input Binding String
-
  description: Whether the specified player is reloading.
  args:
  - name: Player
    description: The player whose reload usage to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Reloading
-
  description: An ID representing the most recent Add Health Pool action that was
    executed by the event player (or executed at the global level).
  return: Health Pool ID
  en-US: Last Created Health Pool
-
  description: The current max ammo of a player.
  args:
  - name: Player
    description: The player whose max ammo to acquire.
    type: Player
    default: Event Player
  - name: Clip
    description: The index of the clip to be acquired. 0 is the first clip, and 1 is the second. If the specified type does not exist, this will return 0.
    type: Integer
    default: 0
  return: Float
  en-US: Max Ammo
-
  description: The max health of the specified player, filtered by the given health
    type.
  args:
  - name: Player
    description: The player whose max health to acquire.
    type: Player
    default: Event Player
  - name: Health
    description: The type of max health to acquire.
    type: Health
    default: Health
  return: Float
  en-US: Max Health of Type
-
  description: The currently held weapon of a player. Returns 2 for Baby Dva's gun,
    Torbjorn's hammer, and Mercy's pistol; 1 otherwise.
  args:
  - name: Player
    description: The player whose weapon to acquire.
    type: Player
    default: Event Player
  return: Integer
  en-US: Weapon
-
  description: A Color Constant
  return: Color
  args:
  - name: Color
    description: A Color Constant
    type: Color
    default: White
  en-US: Color
-
  description: Custom color with specified rgb and alpha values.
  args:
  - name: Red
    description: The red component of a color
    type: Integer
    default: 255
  - name: Green
    description: The green component of a color
    type: Integer
    default: 255
  - name: Blue
    description: The blue component of a color
    type: Integer
    default: 255
  - name: Alpha
    description: The alpha component of a color
    type: Integer
    default: 255
  return: Color
  en-US: Custom Color
-
  description: Provides the value of a new real number setting that will appear in
    the workshop settings card as a slider.
  args:
  - name: Category
    description: The name of the category in which this setting will be found.
    type: String
    default: Custom String
  - name: Name
    description: The name of this setting.
    type: String
    default: Custom String
  - name: Default
    description: The default value for this setting.
    type: Float
    default: 0
  - name: Min
    description: The lowest allowed value for this setting.
    type: Float
    default: 0
  - name: Max
    description: The highest allowed value for this setting.
    type: Float
    default: 100
  - name: Sort Order
    description: The sort order of the setting relative to other settings in the same category. Settings with a higher sort order will come after settings with a lower sort order.
    type: Integer
    default: 0
  isConstant: true
  return: Float
  en-US: Workshop Setting Real
-
  description: Provides the value of a new integer setting that will appear in the
    workshop settings card as a slider.
  args:
  - name: Category
    description: The name of the category in which this setting will be found.
    type: String
    default: Custom String
  - name: Name
    description: The name of this setting.
    type: String
    default: Custom String
  - name: Default
    description: The default value for this setting.
    type: Float
    default: 0
  - name: Min
    description: The lowest allowed value for this setting.
    type: Float
    default: 0
  - name: Max
    description: The highest allowed value for this setting.
    type: Float
    default: 100
  - name: Sort Order
    description: The sort order of the setting relative to other settings in the same category. Settings with a higher sort order will come after settings with a lower sort order.
    type: Integer
    default: 0
  isConstant: true
  return: Integer
  en-US: Workshop Setting Integer
-
  description: Provides the value (true or false) of a new toggle setting that will
    appear in the workshop settings card as a checkbox.
  args:
  - name: Category
    description: The name of the category in which this setting will be found.
    type: String
    default: Custom String
  - name: Name
    description: The name of this setting.
    type: String
    default: Custom String
  - name: Default
    description: The default value for this setting.
    type: Boolean
    default: False
  - name: Sort Order
    description: The sort order of the setting relative to other settings in the same category. Settings with a higher sort order will come after settings with a lower sort order.
    type: Integer
    default: 0
  return: Boolean
  en-US: Workshop Setting Toggle
-
  description: Provides the value (a choice of Custom Strings) of a new option setting that will appear in the Workshop Settings card as a combo box. This value returns the index of the selected choice.
  args:
  - name: Category
    description: The name of the category in which this setting will be found.
    type: Object
    default: Custom String
  - name: Name
    description: The name of this setting.
    type: Object
    default: Custom String
  - name: Default
    description: The default value for this setting.
    type: Integer
    default: 0
  - name: Options
    description: The options for this setting.
    type: Array
    default: Array
  - name: Sort Order
    description: The sort order of the setting relative to other settings in the same category. Settings with a higher sort order will come after settings with a lower sort order.
    type: Integer
    default: 0
  return: Object
  en-US: Workshop Setting Combo
-
  description: Provides the value of a new hero setting that will appear in the Workshop Settings card as a combo box.
  args:
  - name: Category
    description: The name of the category in which this setting will be found.
    type: Object
    default: Custom String
  - name: Name
    description: The name of this setting.
    type: Object
    default: Custom String
  - name: Default
    description: The default value for this setting.
    type: Hero
    default: Ana
  - name: Sort Order
    description: The sort order of the setting relative to other settings in the same category. Settings with a higher sort order will come after settings with a lower sort order.
    type: Integer
    default: 0
  return: Hero
  en-US: Workshop Setting Hero
-
  description: Results in the first value that was provided to the Input Value parameter for the given action or condition (usefor for selectively not reevaluating certain parts of a value when used in conjunction with an action that is capable of reevaluation).
  args:
  - name: Input Value
    description: This value is only evaluated once per action or condition.
    type: Void
    default: 0
  return: Value
  en-US: Evaluate Once
-
  description: Results in the value that is provided to the Input Value parameter and increases the update frequency of the value to once per frame. Useful for smoothing the appearance of certain Values - such as Position Of - that normally only update every few frames. Applies to Conditions as well as Action Parameters that reevaluate. May increase server load and/or lower framerate.
  args:
  - name: Input Value
    description: This value's update rate will be increased from once every few frame to every frame.
    type: Void
    default: Position Of
  return: Value
  en-US: Update Every Frame
-
  description: The magnitude of the spcified Value
  args:
  - name: Value
    description: The Vector operand of the magnitude operation.
    type: Void
    default: Vector
  return: Float
  en-US: Magnitude Of
-
  description: The number of Slots on a Team or in the match.
  args:
  - name: Team
    description: The Team or Teams on which to count Slots.
    type: Team
    default: Team
  return: Integer
  en-US: Number of Slots
-
  description: The active spawn points for a Team or for the match, provided as an array of position vectors.
  args:
  - name: Team
    description: The Team whose spawn points to acquire.
    type: Team
    default: Team
  return: Array
  en-US: Spawn Points
-
  description: Whether the specified String contains the specified Value.
  args:
  - name: String
    description: The String in which to search for the specified Value.
    type: String
    default: Custom String
  - name: Value
    description: The Value for which to search.
    type: String
    default: Custom String
  return: Boolean
  en-US: String Contains
-
  description: Results in the number of characters in the String value (or 0 if the value is not a string).
  args:
  - name: String
    description: The string value whose characters to count.
    type: String
    default: Global Variable
  return: Integer
  en-US: String Length
-
  description: Results in the specified substring of the String value.
  args:
  - name: String
    description: The string value from which to build the substring.
    type: String
    default: Global Variable
  - name: Start Character Index
    description: Specifies the character that will start the substring (with 0 as the first character, 1 as the second character, etc.).
    type: Integer
    default: 0
  - name: Character Count
    description: Specifies the number of characters in the substring.
    type: Integer
    default: 0
  return: String
  en-US: String Slice
-
  description: An ID representing the most recent Start Assist Action that was executed by the Event Player (or executed at the Global level).
  return: AssistId
  en-US: Last Assist ID
-
  description: Whether a Player is using a spray.
  args:
  - name: Player
    description: The Player whose spray status to check.
    type: Player
    default: Event Player
  return: Boolean
  en-US: Is Communicating Any Spray
-
  description: Provides a statistic of the specified Player (limited to the current match). Statistics are only gathered when the game is in progress. Dummy bots do not gather statistics.
  args:
  - name: Player
    description: The Player whose Statistic to acquire.
    type: Player
    default: Event Player
  - name: Stat
    description: The statistic to acquire.
    type: Statistic
    default: All Damage Dealt
  return: Integer
  en-US: Player Stat
-
  description: Provides a statistic of the specified Player's time playing a specific Hero (limited to the current match). Statistics are only gathered when the game is in progress. Dummy bots do not gather statistics.
  args:
  - name: Player
    description: The Player whose Statistic to acquire.
    type: Player
    default: Event Player
  - name: Hero
    description: The hero whose statistic to acquire
    type: Hero
    default: Hero
  - name: Stat
    description: The statistic to acquire.
    type: Statistic
    default: All Damage Dealt
  return: Integer
  en-US: Player Hero Stat
-
  description: The current number of Damage Over Time instances started from the Damage Over Time action.
  en-US: Damage Over Time Count
  return: Integer
-
  description: The current number of Heal Over Time instances started from the Heal Over Time action.
  en-US: Heal Over Time Count
  return: Integer
-
  description: The current number of Text instances started from the Create HUD Text, Create In-World Text, Create Progress Bar HUD text, or Create Progress Bar In-World Text Action.
  en-US: Text Count
  return: Integer
-
  description: The current number of Damage Modification instances started from the Start Damage Modification Action.
  en-US: Damage Modification Count
  return: Integer
-
  description: The current number of Healing Modification instances started from the Start Healing Modification Action.
  en-US: Healing Modification Count
  return: Integer
-
  description: The current number of Assist instances started from the Start Assist Action.
  en-US: Assist Count
  return: Integer
-
  description: The current number of Entities created from the Create Effect, Create Beam Effect, or Create Icon Action.
  en-US: Entity Count
  return: Integer
-
  description: The Player being controlled on the end user's computer. This Value is different for each end user and thus can only be accessed in Actions which affect visuals or the HUD. This Value cannot be stored in Variables.
  en-US: Local Player
  return: Player
-
  description: The character found at a specified index of a String.
  args:
  - name: String
    description: The String Value whose character to acquire.
    type: String
    default: Global Variable
  - name: Index
    description: The index of the character to be acquired (with 0 as the first character, 1 as the second character, etc.).
    type: Integer
    default: 0
  return: String
  en-US: Char In String
-
  description: The index of a character within a String or -1 if no such character can be found.
  args:
  - name: String
    description: The String Value from which to search for the character.
    type: String
    default: Global Variable
  - name: Character
    description: The character for which to search
    type: String
    default: Global Variable
  return: Index
  en-US: Index Of String Char
-
  description: Results in an Array of String Values. These String Values will be built from the specified String Value, split around the separator String.
  args:
  - name: String
    description: The String Value to split.
    type: String
    default: Global Variable
  - name: Separator
    description: The separator String with which to split the String Value.
    type: String
    default: Global Variable
  return:
    Array: String
  en-US: String Split
-
  description: Results in a String Value. This String Value will be built from the specified String Value, where all occurences of the pattern String are replaced with the replacement String.
  args:
  - name: String
    description: The String Value with which to search for replacements.
    type: String
    default: Global Variable
  - name: Pattern
    description: The String pattern to be replaced.
    type: String
    default: Global Variable
  - name: Replacement
    description: The String Value with which to replace the pattern String
    type: String
    default: Global Variable
  return: String
  en-US: String Replace
