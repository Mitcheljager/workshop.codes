-
  return: Void
  en-US: Abort
-
  description: Stops execution of the action list if this action's condition evaluates to true. If it does not, execution continues with the next action.
  args:
  - name: Condition
    description: Specifies whether the execution is stopped.
    type: Boolean
    default: Compare
  return: Void
  en-US: Abort If
-
  description: Stops execution of the action list if at least one condition in the condition list is false. If all conditions are true, execution continues with the next action.
  return: Void
  en-US: Abort If Condition Is False
-
  description: Stops execution of the action list if all conditions in the condition list are true. If any are false, execution continues with the next action.
  return: Void
  en-US: Abort If Condition Is True
-
  description: Undoes the effect of the disallow button action for one or more players.
  args:
  - name: Player
    description: The player or players whose button is being reenabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Button
    description: The logical button that is being reenabled.
    type: Button
    default: Primary Fire
  return: Void
  en-US: Allow Button
-
  description: Applies an instantaneous change in velocity to the movement of one or more players.
  args:
  - name: Player
    description: The player or players whose velocity will be changed.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Direction
    description: The unit direction in which the impulse will be applied. This value is normalized internally.
    type: Direction
    default: Vector
  - name: Speed
    description: The magnitude of the change to the velocities of the player or players.
    type: Float
    default: Number
  - name: Relative
    description: Specifies whether direction is relative to world coordinates or the local coordinates of the player or players.
    type: Relativity
    default: To World
  - name: Motion
    description: Specifies whether existing velocity that is counter to direction should first be cancelled out before applying the impulse.
    type: Impulse
    default: Cancel Contrary Motion
  return: Void
  en-US: Apply Impulse
-
  description: Attaches the player (the 'child') to another player (the 'parent'). Once attached, the child will be unable to move freely until detached or teleported away. Multiple children may be attached to the same parent, but not vice versa.
  args:
  - name: Child
    description: The player that will attach to the parent. This player will be unable to move freely until detached or teleported away.
    type: Player
    default: Event Player
  - name: Parent
    description: The player to whom the child will attach. This player's movement will be unaffected and will determine the child's position.
    type: Player
    default: Last Created Entity Entity
  - name: Offset
    description: The coordinates of the child relative to the parent. For example, `vect(1,2,0)` would be above and to the left of the parent's head.
    type: Position
    default: Vector
  return: Void
  en-US: Attach Players
-
  description: Displays a large message above the reticle that is visible to specific players.
  args:
  - name: Visible To
    description: One or more players who will see the message.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Header
    description: The message to be displayed.
    type: Object
    default: String
  return: Void
  en-US: Big Message
-
  description: Goes to the end of the innermost `switch` statement, or `do/while`, `while` or `for` loop.
  args:
  return: Void
  en-US: Break
-
  description: Pauses execution of the current rule and begins executing a subroutine rule (which is a rule with a subroutine event type). When the subroutine rule finishes, the original rule resumes execution. The subroutine will have access to the same contextual values (such as Event Player) as the original rule.
  args:
  - name: Subroutine
    description: Specifies which subroutine to call. If a rule with a subroutine event type specifies the same subroutine, then it will execute. Otherwise, this action is ignored.
    type: Subroutine
    default: Sub0
  return: Void
  en-US: Call Subroutine
-
  description: Cancels the active abilities for one or more players. Equivalent to a short stun.
  args:
  - name: Player
    description: The player or players to cancel active abilities for.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Cancel Primary Action
-
  description: Gradually modifies the value of a global variable at a specific rate. (A global variable is a variable that belongs to the game itself.)
  args:
  - name: Variable
    description: Specifies which global variable to modify gradually.
    type: Global Variable
    default: A
  - name: Destination
    description: The value that the global variable will eventually reach. The type of this value may be either a number or a vector, though the variable's existing value must be of the same type before the chase begins.
    type:
    - Float
    - Vector
    default: Number
  - name: Rate
    description: The amount of change that will happen to the variable's value each second.
    type: Float
    default: Number (1)
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. This action will keep asking for and using new values from reevaluated inputs.
    type: Chase Reevaluation
    default: Destination And Rate
  return: Void
  en-US: Chase Global Variable At Rate
-
  description: Gradually modifies the value of a global variable over time. (A global variable is a variable that belongs to the game itself.)
  args:
  - name: Variable
    description: Specifies which global variable to modify gradually.
    type: Global Variable
    default: A
  - name: Destination
    description: The value that the global variable will eventually reach. The type of this value may be either a number or a vector, though the variable's existing value must be of the same type before the chase begins.
    type:
    - Float
    - Vector
    default: Number
  - name: Duration
    description: The amount of time, in seconds, over which the variable's value will approach the destination.
    type: Float
    default: Number (1)
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. This action will keep asking for and using new values from reevaluated inputs.
    type: Chase Time Reevaluation
    default: Destination And Duration
  return: Void
  en-US: Chase Global Variable Over Time
-
  description: Gradually modifies the value of a player variable at a specific rate. (A player variable is a variable that belongs to a specific player.)
  args:
  - name: Player
    description: The player whose variable will gradually change. If multiple players are provided, each of their variables will change independently.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Variable
    description: Specifies which of the player's variables to modify gradually.
    type: Player Variable
    default: A
  - name: Destination
    description: The value that the player variable will eventually reach. The type of this value may be either a number or a vector, though the variable's existing value must be of the same type before the chase begins.
    type:
    - Float
    - Vector
    default: Number
  - name: Rate
    description: The amount of change that will happen to the variable's value each second.
    type: Float
    default: Number (1)
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. This action will keep asking for and using new values from reevaluated inputs.
    type: Chase Reevaluation
    default: Destination And Rate
  return: Void
  en-US: Chase Player Variable At Rate
-
  description: Gradually modifies the value of a player variable over time. (A player variable is a variable that belongs to a specific player.)
  args:
  - name: Player
    description: The player whose variable will gradually change. If multiple players are provided, each of their variables will change independently.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Variable
    description: Specifies which of the player's variables to modify gradually.
    type: Player Variable
    default: A
  - name: Destination
    description: The value that the player variable will eventually reach. The type of this value may be either a number or a vector, though the variable's existing value must be of the same type before the chase begins.
    type:
    - Float
    - Vector
    default: Number
  - name: Duration
    description: The amount of time, in seconds, over which the variable's value will approach the destination.
    type: Float
    default: Number (1)
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. This action will keep asking for and using new values from reevaluated inputs.
    type: Chase Time Reevaluation
    default: Destination And Duration
  return: Void
  en-US: Chase Player Variable Over Time
-
  description: Clears a status that was applied from a set status action from one or more players.
  args:
  - name: Player
    description: The player or players from whom the status will be removed.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Status
    description: The status to be removed from the player or players.
    type: Status
    default: Hacked
  return: Void
  en-US: Clear Status
-
  description: Causes one or more players to use an emote, voice line, or other equipped communication.
  args:
  - name: Player
    description: The player or players to perform the communication.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Type
    description: The type of communication.
    type: Comms
    default: Voice Line Up
  return: Void
  en-US: Communicate
-
  description: Goes back to the start of the innermost loop.
  args:
  return: Void
  en-US: Continue
-
  description: Creates an in-world beam effect entity. This effect entity will persist until destroyed. To obtain a reference to this entity, use the last created entity value. This action will fail if too many entities have been created.
  args:
  - name: Visible To
    description: One or more players who will be able to see the effect.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Type
    description: The type of effect to be created.
    type: Beam
    default: Good Beam
  - name: Start Position
    description: The effect's start position. If this value is a player, then the effect will move along with the player. Otherwise, the value is interpreted as a position in the world.
    type: Position
    default: Event Player
  - name: End Position
    description: The effect's end position. If this value is a player, then the effect will move along with the player. Otherwise, the value is interpreted as a position in the world.
    type: Position
    default: Event Player
  - name: Color
    description: The color of the beam to be created. If a particular team is chosen, the effect will either be red or blue, depending on whether the team is hostile to the viewer. Does not apply to sound effects. Only the "good" and "bad" beam effects can have color applied.
    type: Color
    default: Color
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. The effect will keep asking for and using new values from reevaluated inputs.
    type: Effect Reevaluation
    default: Visible To Position And Radius
  return: Void
  en-US: Create Beam Effect
-
  description: Adds a new bot to the specified slot on the specified team so long as the slot is available. This bot will only move, fire, or use abilities if executing workshop actions.
  args:
  - name: Hero
    description: The hero that the bot will be. If more than one hero is provided, one will be chosen at random.
    type: Hero
    default: Hero
  - name: Team
    description: The team on which to create the bot. The "all" option only works in free-for-all game modes, while the "team" options only work in team-based game modes.
    type: Team
    default: Team
  - name: Slot
    description: The player slot which will receive the bot (-1 for first available slot). Up to 6 bots may be added to each team, or 12 bots to the free-for-all team, regardless of lobby settings.
    type: Integer
    default: -1
  - name: Position
    description: The initial position where the bot will appear.
    type: Position
    default: Vector
  - name: Facing
    description: The initial direction that the bot will face.
    type: Direction
    default: Vector
  return: Void
  en-US: Create Dummy Bot
-
  description: Creates an in-world effect entity. This effect entity will persist
    until destroyed. To obtain a reference to this entity, use the last created entity
    value. This action will fail if too many entities have been created.
  args:
  - name: Visible To
    description: One or more players who will be able to see the effect.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Type
    description: The type of effect to be created.
    type: Effect
    default: Sphere
  - name: Color
    description: The color of the effect to be created. If a particular team is chosen, the effect will either be red or blue, depending on whether the team is hostile to the viewer. Does not apply to sound effects.
    type: Color
    default: Color
  - name: Position
    description: The effect's position. If this value is a player, then the effect will move along with the player. Otherwise, the value is interpreted as a position in the world.
    type: Position
    default: Vector
  - name: Radius
    description: The radius of this effect.
    type: Float
    default: Number (1)
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated.
    type: Effect Reevaluation
    default: Visible To Position And Radius
  return: Void
  en-US: Create Effect
-
  description: Creates hud text visible to specific players at a specific location
    on the screen. This text will persist until destroyed. To obtain a reference to
    this text, use the last text id value. This action will fail if too many text
    elements have been created.
  args:
  - name: Visible To
    description: One or more players who will see the hud text.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Header
    description: The text to be displayed (can be blank)
    type: Object
    default: String
  - name: Subheader
    description: The subheader text to be displayed (can be blank)
    type: Object
    default: 'Null'
  - name: Text
    description: The body text to be displayed (can be blank)
    type: Object
    default: 'Null'
  - name: Location
    description: The location on the screen where the text will appear.
    type: HUD Position
    default: Left
  - name: SORT ORDER
    description: The sort order of the text relative to other text in the same location. A higher sort order will come after a lower sort order.
    type: Float
    default: Number
  - name: Header Color
    description: The color of the header.
    type: Color
    default: Color
  - name: Subheader Color
    description: The color of the subheader.
    type: Color
    default: Color
  - name: Text Color
    description: The color of the text.
    type: Color
    default: Color
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated.
    type: HUD Reevaluation
    default: Visible To And String
  - name: Spectators
    description: Whether spectators can see the text or not.
    type: Spectator Visibility
    default: Default Visibility
  return: Void
  en-US: Create HUD Text
-
  description: Creates an in-world icon entity. This icon entity will persist until
    destroyed. To obtain a reference to this entity, use the last created entity value.
    This action will fail if too many entities have been created.
  args:
  - name: Visible To
    description: One or more players who will be able to see the icon.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Position
    description: The icon's position. If this value is a player, then the icon will appear above the player's head. Otherwise, the value is interpreted as a position in the world.
    type: Position
    default: Vector
  - name: Icon
    description: The icon to be created.
    type: Icon
    default: 'Arrow: Down'
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. The icon will keep asking for and using new values from reevaluated inputs.
    type: Icon Reevaluation
    default: Visible To And Position
  - name: Icon Color
    description: The color of the icon to be created. If a particular team is chosen, the effect will either be red or blue, depending on whether the team is hostile to the viewer.
    type: Color
    default: Color
  - name: Show When Offscreen
    description: Should this icon appear even when it is behind you?
    type: Boolean
    default: 'True'
  return: Void
  en-US: Create Icon
-
  description: Creates in-world text visible to specific players at a specific position
    in the world. This text will persist until destroyed. To obtain a reference to
    this text, use the last text id value. This action will fail if too many text
    elements have been created.
  args:
  - name: Visible To
    description: One or more players who will see the in-world text.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Header
    description: The text to be displayed.
    type: Object
    default: String
  - name: Position
    description: The text's position. If this value is a player, then the text will appear above the player's head. Otherwise, the value is interpreted as a position in the world.
    type: Position
    default: Vector
  - name: Scale
    description: The text's scale.
    type: Float
    default: Number (1)
  - name: Clipping
    description: Specifies whether the text can be seen through walls or is instead clipped.
    type: Clip
    default: Clip Against Surfaces
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. The text will keep asking for and using new values from reevaluated inputs.
    type: In-World Text Reevaluation
    default: Visible To Position And String
  - name: Text Color
    description: Specifies the color of the in-world text to use.
    type: Color
    default: Color
  - name: Spectators
    description: Whether spectators can see the text or not.
    type: Spectator Visibility
    default: Default Visibility
  return: Void
  en-US: Create In-World Text
-
  description: Applies instantaneous damage to one or more players, possibly killing
    the players.
  args:
  - name: Player
    description: The player or players who will receive damage.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Damager
    description: The player who will receive credit for the damage. A damager of null indicates no player will receive credit.
    type: Player
    default: 'Null'
  - name: Amount
    description: The amount of damage to apply. This amount may be modified by buffs, debuffs, or armor.
    type: Float
    default: Number
  return: Void
  en-US: Damage
-
  description: Instantly ends the match in a draw. This action has no effect in free-for-all
    modes.
  return: Void
  en-US: Declare Match Draw
-
  description: Instantly ends the match with the specific player as the winner. This
    action only has an effect in free-for-all modes.
  args:
  - name: Player
    description: The winning player.
    type: Player
    default: Event Player
  return: Void
  en-US: Declare Player Victory
-
  description: Declare a draw for the current round. This only works in the elimination
    game mode.
  return: Void
  en-US: Declare Round Draw
-
  description: Declare a team as the current round winner. This only works in the
    control and elimination game modes.
  args:
  - name: Round Winning Team
    description: Round winning team
    type: Team
    default: Team
  return: Void
  en-US: Declare Round Victory
-
  description: Instantly ends the match with the specified team as the winner. This
    action has no effect in free-for-all modes.
  args:
  - name: Team
    description: The winning team.
    type: Team
    default: Team
  return: Void
  en-US: Declare Team Victory
-
  description: Removes all dummy bots from the match.
  return: Void
  en-US: Destroy All Dummy Bots
-
  description: Destroys all effect entities created by create effect.
  return: Void
  en-US: Destroy All Effects
-
  description: Destroys all hud text that was created by the create hud text action.
  return: Void
  en-US: Destroy All HUD Text
-
  description: Destroys all icon entities created by create icon.
  return: Void
  en-US: Destroy All Icons
-
  description: Destroys all in-world text created by create in-world text.
  return: Void
  en-US: Destroy All In-World Text
-
  description: Removes the specified dummy bot from the match.
  args:
  - name: Team
    description: The team to remove the dummy bot from. The "all" option only works in free-for-all game modes, while the "team" options only work in team-based game modes.
    type: Team
    default: Team
  - name: Slot
    description: The slot to remove the dummy bot from.
    type: Integer
    default: Number
  return: Void
  en-US: Destroy Dummy Bot
-
  description: Destroys an effect entity that was created by create effect.
  args:
  - name: Entity
    description: Specifies which effect entity to destroy. This entity may be last created entity or a variable into which last created entity was earlier stored.
    type: Entity ID
    default: Last Created Entity Entity
  return: Void
  en-US: Destroy Effect
-
  description: Destroys hud text that was created by create hud text.
  args:
  - name: Text ID
    description: Specifies which hud text to destroy. This id may be last text id or a variable into which last text id was earlier stored.
    type: Text ID
    default: Last Text ID
  return: Void
  en-US: Destroy HUD Text
-
  description: Destroys an icon entity that was created by create icon.
  args:
  - name: Entity
    description: Specifies which icon entity to destroy. This entity may be last created entity or a variable into which last created entity was earlier stored.
    type: Entity ID
    default: Last Created Entity Entity
  return: Void
  en-US: Destroy Icon
-
  description: Destroys in-world text that was created by create in-world text.
  args:
  - name: Text ID
    description: Specifies which in-world text to destroy. This id may be last text id or a variable into which last text id was earlier stored.
    type: Text ID
    default: Last Text ID
  return: Void
  en-US: Destroy In-World Text
-
  description: Undoes the attachment caused by the 'attachTo' action for one or more
    players. These players will resume normal movement from their current position.
  args:
  - name: CHILDREN
    description: The player or players that will become detached from their parent.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Detach Players
-
  description: Disables game mode announcements from the announcer until reenabled
    or the match ends.
  return: Void
  en-US: Disable Built-In Game Mode Announcer
-
  description: Disables completion of the match from the game mode itself, only allowing
    the match to be completed by scripting commands.
  return: Void
  en-US: Disable Built-In Game Mode Completion
-
  description: Disables all game mode music until reenabled or the match ends.
  return: Void
  en-US: Disable Built-In Game Mode Music
-
  description: Disables automatic respawning for one or more players, only allowing
    respawning by scripting commands.
  args:
  - name: PlayerS
    description: The player or players whose respawning is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Disable Built-In Game Mode Respawning
-
  description: Disables changes to player and team scores from the game mode itself,
    only allowing scores to be changed by scripting commands.
  return: Void
  en-US: Disable Built-In Game Mode Scoring
-
  description: Undoes the effect of the enable death spectate all players action for
    or more players.
  args:
  - name: Player
    description: The player or players whose default death spectate behavior is restored.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Disable Death Spectate All Players
-
  description: Undoes the effect of the enable death spectate target hud action for
    or more players.
  args:
  - name: Player
    description: The player or players who will revert to seeing their own hud while death spectating.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Disable Death Spectate Target HUD
-
  description: Causes the workshop inspector to stop recording new entries. This has
    the benefit of reducing your script's server load, particularly when modifying
    arrays.
  return: Void
  en-US: Disable Inspector Recording
-
  description: Disables a logical button for one or more players such that pressing
    it has no effect.
  args:
  - name: Player
    description: The player or players whose button is being disabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Button
    description: The logical button that is being disabled.
    type: Button
    default: Primary Fire
  return: Void
  en-US: Disallow Button
-
  description: Denotes the beginning of a series of actions that will only execute
    if the previous If or Else If action's condition was false.
  return: Void
  en-US: Else
-
  description: Denotes the beginning of a series of actions that will only execute
    if the specified condition is true and the previous If or Else If action's condition
    was false.
  args:
  - name: Condition
    description: If this evaluates to true, execution continues with the next action. Otherwise, execution jumps to the next else if, else, or end action at the current level.
    type: Boolean
    default: Compare
  return: Void
  en-US: Else If
-
  description: Undoes the effect of the disable built-in game mode announcer action.
  return: Void
  en-US: Enable Built-In Game Mode Announcer
-
  description: Undoes the effect of the disable built-in game mode completion action.
  return: Void
  en-US: Enable Built-In Game Mode Completion
-
  description: Undoes the effect of the disable built-in game mode music action.
  return: Void
  en-US: Enable Built-In Game Mode Music
-
  description: Undoes the effect of the disable built-in game mode respawning action
    for one or more players.
  args:
  - name: PlayerS
    description: The player or players whose respawning is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Enable Built-In Game Mode Respawning
-
  description: Undoes the effect of the disable built-in game mode scoring action.
  return: Void
  en-US: Enable Built-In Game Mode Scoring
-
  description: Allows one or more players to spectate all players when dead, as opposed
    to only allies.
  args:
  - name: Player
    description: The player or players who will be allowed to spectate all players.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Enable Death Spectate All Players
-
  description: Causes one or more players to see their spectate target's hud instead
    of their own while death spectating.
  args:
  - name: Player
    description: The player or players who will begin seeing their spectate targets hud while death spectating.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Enable Death Spectate Target HUD
-
  description: Causes the workshop inspector to resume recording new entries (in case
    it had been disabled earlier). Enabling recording at specific times may make it
    easier to debug problematic areas in your logic.
  return: Void
  en-US: Enable Inspector Recording
-
  description: Denotes the end of a series of actions started by an if, else if, else,
    while, or for action.
  return: Void
  en-US: End
-
  description: Denotes the beginning of a series of actions that will execute in a
    loop, modifying the control variable on each loop. The corresponding end action
    denotes the end of the loop. If the control variable reaches or passes the range
    stop value, then the loop exits, and execution jumps to the next action after
    the end action.
  args:
  - name: Control Variable
    description: The variable being modified in this loop. It is set to the range start value when the loop begins, and the loop continues until the control variable reaches or passes the range stop value.
    type: Global Variable
    default: A
  - name: Range Start
    description: The control variable is set to this value when the loop begins.
    type: Float
    default: Number
  - name: Range Stop
    description: If the control variable reaches or passes this value, then the loop will exit, and execution jumps to the next action after the end action. Whether this value is considered passed or not is based on whether the step value is negative or positive. If the control variable has already reached or passed this value when the loop begins, then the loop exits.
    type: Float
    default: Count OF
  - name: Step
    description: This value is added to the control variable when the end action is reached. If this modification causes the control variable to reach or pass the range stop value, then the loop exits, and execution jumps to the next action after the end action. Otherwise, the loop continues, and execution jumps to the next action after the for action.
    type: Float
    default: Number (1)
  return: Void
  en-US: For Global Variable
-
  description: Denotes the beginning of a series of actions that will execute in a
    loop, modifying the control variable on each loop. The corresponding end action
    denotes the end of the loop. If the control variable reaches or passes the range
    stop value, then the loop exits, and execution jumps to the next action after
    the end action.
  args:
  - name: Control Player
    description: The player whose variable is being modified in this loop. If multiple players are specified, the first player is used.
    type: Player
    default: Event Player
  - name: Control Variable
    description: The variable being modified in this loop. It is set to the range start value when the loop begins, and the loop continues until the control variable reaches or passes the range stop value.
    type: Player Variable
    default: A
  - name: Range Start
    description: The control variable is set to this value when the loop begins.
    type: Float
    default: Number
  - name: Range Stop
    description: If the control variable reaches or passes this value, then the loop will exit, and execution jumps to the next action after the end action. Whether this value is considered passed or not is based on whether the step value is negative or positive. If the control variable has already reached or passed this value when the loop begins, then the loop exits.
    type: Float
    default: Count OF
  - name: Step
    description: This value is added to the control variable when the end action is reached. If this modification causes the control variable to reach or pass the range stop value, then the loop exits, and execution jumps to the next action after the end action. Otherwise, the loop continues, and execution jumps to the next action after the for action.
    type: Float
    default: Number (1)
  return: Void
  en-US: For Player Variable
-
  description: Returns the match to the assemble heroes phase of the game mode. Only
    works if the game is in progress.
  return: Void
  en-US: Go To Assemble Heroes
-
  description: Provides an instantaneous heal to one or more players. This heal will
    not resurrect dead players.
  args:
  - name: Player
    description: The player or players whose health will be restored.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Healer
    description: The player who will receive credit for the healing. A healer of null indicates no player will receive credit.
    type: Player
    default: 'Null'
  - name: Amount
    description: The amount of healing to apply. This amount may be modified by buff or debuffs. Healing is capped by each player's max health.
    type: Float
    default: Number
  return: Void
  en-US: Heal
-
  description: Denotes the beginning of a series of actions that will only execute
    if the specified condition is true.
  args:
  - name: Condition
    description: If this evaluates to true, execution continues with the next action. Otherwise, execution jumps to the next else if, else, or end action at the current level.
    type: Boolean
    default: Compare
  return: Void
  en-US: If
-
  description: Instantly kills one or more players.
  args:
  - name: Player
    description: The player or players who will be killed.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Killer
    description: The player who will receive credit for the kill. A killer of null indicates no player will receive credit.
    type: Player
    default: 'Null'
  return: Void
  en-US: Kill
-
  description: Restarts the action list from the beginning. To prevent an infinite
    loop, a wait action must execute between the start of the action list and this
    action.
  return: Void
  en-US: Loop
-
  description: Restarts the action list from the beginning if this action's condition
    evaluates to true. If it does not, execution continues with the next action. To
    prevent an infinite loop, a wait action must execute between the start of the
    action list and this action.
  args:
  - name: Condition
    description: Specifies whether the loop will occur.
    type: Boolean
    default: Compare
  return: Void
  en-US: Loop If
-
  description: Restarts the action list from the beginning if at least one condition
    in the condition list is false. If all conditions are true, execution continues
    with the next action. To prevent an infinite loop, a wait action must execute
    between the start of the action list and this action.
  return: Void
  en-US: Loop If Condition Is False
-
  description: Restarts the action list from the beginning if every condition in the
    condition list is true. If any are false, execution continues with the next action.
    To prevent an infinite loop, a wait action must execute between the start of the
    action list and this action.
  return: Void
  en-US: Loop If Condition Is True
-
  description: Modifies the value of a global variable, which is a variable that belongs
    to the game itself.
  args:
  - name: Variable
    description: The global variable to modify.
    type: Global Variable
    default: A
  - name: Operation
    description: The way in which the variable's value will be changed. Options include standard arithmetic operations as well as array operations for appending and removing values.
    type: Operation
    default: Add
  - name: Value
    description: The value used for the modification. For arithmetic operations, this is the second of the two operands, with the other being the variable's existing value. For array operations, this is the value to append or remove.
    type:
    - Object
    - Array
    default: Number
  return: Void
  en-US: Modify Global Variable
-
  description: Modifies the value of a global variable at an index, which is a variable
    that belongs to the game itself.
  args:
  - name: Variable
    description: The global variable to modify.
    type: Global Variable
    default: A
  - name: Index
    description: The index of the array to modify. If the index is beyond the end of the array, the array is extended with new elements given a value of zero.
    type: Integer
    default: Number
  - name: Operation
    description: The way in which the variable's value will be changed. Options include standard arithmetic operations as well as array operations for appending and removing values.
    type: Operation
    default: Add
  - name: Value
    description: The value used for the modification. For arithmetic operations, this is the second of the two operands, with the other being the variable's existing value. For array operations, this is the value to append or remove.
    type:
    - Object
    - Array
    default: Number
  return: Void
  en-US: Modify Global Variable At Index
-
  description: Modifies the score (kill count) of one or more players. This action
    only has an effect in free-for-all modes.
  args:
  - name: Player
    description: The player or players whose score will change.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Score
    description: The amount the score will increase or decrease. If positive, the score will increase. If negative, the score will decrease.
    type: Integer
    default: Number
  return: Void
  en-US: Modify Player Score
-
  description: Modifies the value of a player variable, which is a variable that belongs
    to a specific player.
  args:
  - name: Player
    description: The player whose variable will be modified. If multiple players are provided, each of their variables will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Variable
    description: Specifies which of the player's variables to modify.
    type: Player Variable
    default: A
  - name: Operation
    description: The way in which the variable's value will be changed. Options include standard arithmetic operations as well as array operations for appending and removing values.
    type: Operation
    default: Add
  - name: Value
    description: The value used for the modification. For arithmetic operations, this is the second of the two operands, with the other being the variable's existing value. For array operations, this is the value to append or remove.
    type:
    - Object
    - Array
    default: Number
  return: Void
  en-US: Modify Player Variable
-
  description: Modifies the value of a player variable at an index, which is a variable
    that belongs to a specific player.
  args:
  - name: Player
    description: The player whose variable will be modified. If multiple players are provided, each of their variables will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Variable
    description: Specifies which of the player's variables to modify.
    type: Player Variable
    default: A
  - name: Index
    description: The index of the array to modify. If the index is beyond the end of the array, the array is extended with new elements given a value of zero.
    type: Integer
    default: Number
  - name: Operation
    description: The way in which the variable's value will be changed. Options include standard arithmetic operations as well as array operations for appending and removing values.
    type: Operation
    default: Add
  - name: Value
    description: The value used for the modification. For arithmetic operations, this is the second of the two operands, with the other being the variable's existing value. For array operations, this is the value to append or remove.
    type:
    - Object
    - Array
    default: Number
  return: Void
  en-US: Modify Player Variable At Index
-
  description: Modifies the score of one or both teams. This action has no effect
    in free-for-all modes or modes without a team score.
  args:
  - name: Team
    description: The team or teams whose score will be changed.
    type: Team
    default: Team
  - name: Score
    description: The amount the score will increase or decrease. If positive, the score will increase. If negative, the score will decrease.
    type: Integer
    default: Number
  return: Void
  en-US: Modify Team Score
-
  description: Pauses the match time. Players, objective logic, and game mode advancement
    criteria are unaffected by the pause.
  return: Void
  en-US: Pause Match Time
-
  description: Plays an effect at a position in the world. The lifetime of this effect
    is short, so it does not need to be updated or destroyed.
  args:
  - name: Visible To
    description: One or more players who will be able to see the effect.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Type
    description: The type of effect to be created.
    type: DynamicEffect
    default: Good Explosion
  - name: Color
    description: The color of the effect to be created. If a particular team is chosen, the effect will either be red or blue, depending on whether the team is hostile to the viewer.
    type: Color
    default: Color
  - name: Position
    description: The effect's position. If this value is a player, then the effect will play at the player's position. Otherwise, the value is interpreted as a position in the world.
    type: Position
    default: Vector
  - name: Radius
    description: The effect's radius in meters.
    type: Float
    default: Number (1)
  return: Void
  en-US: Play Effect
-
  description: Preemptively loads the specified hero or heroes into memory using the
    skins of the specified player or players, available memory permitting. Useful
    whenever rapid hero changing is possible and the next hero is known.
  args:
  - name: Player
    description: The player or players who will begin preloading a hero or heroes. Only one preload hero action will be active at a time for a given player.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Hero
    description: The hero or heroes to begin preloading for the specified player or players. When multiple heroes are specified in an array, the heroes towards the beginning of the array are prioritized.
    type:
    - Hero
    - Array: Hero
    default: Hero
  return: Void
  en-US: Preload Hero
-
  description: Forces one or more players to press a button virtually for a single
    frame.
  args:
  - name: Player
    description: The player or players for whom the virtual button input will be forced.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Button
    description: The button to be pressed.
    type: Button
    default: Primary Fire
  return: Void
  en-US: Press Button
-
  description: Restores the list of heroes available to one or more players to the
    list specified by the game settings. If a player's current hero becomes unavailable,
    the player is forced to choose a different hero and respawn at an appropriate
    spawn location.
  args:
  - name: Player
    description: The player or players whose hero list is being reset.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Reset Player Hero Availability
-
  description: Respawns one or more players at an appropriate spawn location with
    full health, even if they were already alive.
  args:
  - name: Player
    description: The player or players to respawn.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Respawn
-
  description: Instantly resurrects one or more players at the location they died
    with no transition.
  args:
  - name: Player
    description: The player or players who will be resurrected.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Resurrect
-
  description: Enables or disables ability 1 for one or more players.
  args:
  - name: Player
    description: The player or players whose access to ability 1 is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Enabled
    description: Specifies whether the player or players are able to use ability 1. Expects a boolean value such as true, false, or compare.
    type: Boolean
    default: 'True'
  return: Void
  en-US: Set Ability 1 Enabled
-
  description: Enables or disables ability 2 for one or more players.
  args:
  - name: Player
    description: The player or players whose access to ability 2 is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Enabled
    description: Specifies whether the player or players are able to use ability 2. Expects a boolean value such as true, false, or compare.
    type: Boolean
    default: 'True'
  return: Void
  en-US: Set Ability 2 Enabled
-
  description: Set the ability cooldown time for one or more players.
  args:
  - name: Player
    description: The player or players whose ability cooldown time will be modified.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Button
    description: The logical button associated with the ability to be modified.
    type: Button
    default: Primary Fire
  - name: COOLDOWN
    description: The cooldown time that will be set in seconds. Max of 1000.
    type: Float
    default: Number
  return: Void
  en-US: Set Ability Cooldown
-
  description: Sets the aim speed of one or more players to a percentage of their
    normal aim speed.
  args:
  - name: Player
    description: The player or players whose aim speed will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Turn Speed Percent
    description: The percentage of normal aim speed to which the player or players will set their aim speed.
    type: Float
    default: Number
  return: Void
  en-US: Set Aim Speed
-
  description: Enables or disables crouch for one or more players.
  args:
  - name: Player
    description: The player or players whose access to crouch is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Enabled
    description: Specifies whether the player or players are able to use crouch. Expects a boolean value such as true, false, or compare.
    type: Boolean
    default: 'True'
  return: Void
  en-US: Set Crouch Enabled
-
  description: Sets the damage dealt of one or more players to a percentage of their
    raw damage dealt.
  args:
  - name: Player
    description: The player or players whose damage dealt will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Damage Dealt Percent
    description: The percentage of raw damage dealt to which the player or players will set their damage dealt.
    type: Float
    default: Number
  return: Void
  en-US: Set Damage Dealt
-
  description: Sets the damage received of one or more players to a percentage of
    their raw damage received.
  args:
  - name: Player
    description: The player or players whose damage received will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Damage Received Percent
    description: The percentage of raw damage received to which the player or players will set their damage received.
    type: Float
    default: Number
  return: Void
  en-US: Set Damage Received
-
  description: Sets the facing of one or more players to the specified direction.
  args:
  - name: Player
    description: The player or players whose facing will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Direction
    description: The unit direction in which the player or players will face. This value is normalized internally.
    type: Direction
    default: Vector
  - name: Relative
    description: Specifies whether direction is relative to world coordinates or the local coordinates of the player or players.
    type: Relativity
    default: To World
  return: Void
  en-US: Set Facing
-
  description: Stores a value into a global variable, which is a variable that belongs
    to the game itself.
  args:
  - name: Variable
    description: Specifies which global variable to store the value into.
    type: Global Variable
    default: A
  - name: Value
    description: The value that will be stored.
    type:
    - Object
    - Array
    default: Number
  return: Void
  en-US: Set Global Variable
-
  description: Finds or creates an array on a global variable, which is a variable
    that belongs to the game itself, then stores a value in the array at the specified
    index.
  args:
  - name: Variable
    description: Specifies which global variable's value is the array to modify. If the variable's value is not an array, then its value becomes an empty array.
    type: Global Variable
    default: A
  - name: Index
    description: The index of the array to modify. If the index is beyond the end of the array, the array is extended with new elements given a value of zero.
    type: Integer
    default: Number
  - name: Value
    description: The value that will be stored into the array.
    type:
    - Object
    - Array
    default: Number
  return: Void
  en-US: Set Global Variable At Index
-
  description: Sets the movement gravity for one or more players to a percentage regular
    movement gravity.
  args:
  - name: Player
    description: The player or players whose movement gravity will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Gravity Percent
    description: The percentage of regular movement gravity to which the player or players will set their personal movement gravity.
    type: Float
    default: Number
  return: Void
  en-US: Set Gravity
-
  description: Sets the healing dealt of one or more players to a percentage of their
    raw healing dealt.
  args:
  - name: Player
    description: The player or players whose healing dealt will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Healing Dealt Percent
    description: ''
    type: Float
    default: Number
  return: Void
  en-US: Set Healing Dealt
-
  description: Sets the healing received of one or more players to a percentage of
    their raw healing received.
  args:
  - name: Player
    description: The player or players whose healing received will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Healing Received Percent
    description: The percentage of raw healing received to which the player or players will set their healing received.
    type: Float
    default: Number
  return: Void
  en-US: Set Healing Received
-
  description: Causes one or more players to become invisible to either all other
    players or just enemies.
  args:
  - name: Player
    description: The player or players who will become invisible.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: INVisible To
    description: Specifies for whom the player or players will be invisible.
    type: Invis
    default: ALL
  return: Void
  en-US: Set Invisible
-
  description: Enables or disables jump for one or more players.
  args:
  - name: Player
    description: The player or players whose access to jump is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Enabled
    description: Specifies whether the player or players are able to use jump. Expects a boolean value such as true, false, or compare.
    type: Boolean
    default: 'True'
  return: Void
  en-US: Set Jump Enabled
-
  description: Sets the current match time (which is visible at the top of the screen).
    This can be used to shorten or extend the duration of a match or to change the
    duration of assemble heroes or setup.
  args:
  - name: Time
    description: The match time in seconds.
    type: Integer
    default: Number
  return: Void
  en-US: Set Match Time
-
  description: Sets the max health of one or more players as a percentage of their
    max health. This action will ensure that a player's current health will not exceed
    the new max health.
  args:
  - name: Player
    description: The player or players whose max health will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Health Percent
    description: The percentage of raw max health to which the player or players will set their max health.
    type: Float
    default: Number
  return: Void
  en-US: Set Max Health
-
  description: Enables or disables melee for one or more players.
  args:
  - name: Player
    description: The player or players whose access to melee is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Enabled
    description: Specifies whether the player or players are able to use melee. Expects a boolean value such as true, false, or compare.
    type: Boolean
    default: 'True'
  return: Void
  en-US: Set Melee Enabled
-
  description: Sets the move speed of one or more players to a percentage of their
    raw move speed.
  args:
  - name: Player
    description: The player or players whose move speed will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Move Speed Percent
    description: The percentage of raw move speed to which the player or players will set their move speed.
    type: Float
    default: Number
  return: Void
  en-US: Set Move Speed
-
  description: Sets the text at the top center of the screen that normally describes
    the objective to a message visible to specific players.
  args:
  - name: Visible To
    description: One or more players who will see the message.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Header
    description: The message to be displayed.
    type: Object
    default: String
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. The message will keep asking for and using new values from reevaluated inputs.
    type: HUD Reevaluation
    default: Visible To And String
  return: Void
  en-US: Set Objective Description
-
  description: Sets the list of heroes available to one or more players. If a player's
    current hero becomes unavailable, the player is forced to choose a different hero
    and respawn at an appropriate spawn location.
  args:
  - name: Player
    description: The player or players whose hero list is being set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Hero
    description: The hero or heroes that will be available. If no heroes are provided, the action has no effect.
    type:
    - Hero
    - Array: Hero
    default: Hero
  return: Void
  en-US: Set Player Allowed Heroes
-
  description: Sets the score (kill count) of one or more players. This action only
    has an effect in free-for-all modes.
  args:
  - name: Player
    description: The player or players whose score will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Score
    description: The score that will be set.
    type: Integer
    default: Number
  return: Void
  en-US: Set Player Score
-
  description: Stores a value into a player variable, which is a variable that belongs
    to a specific player.
  args:
  - name: Player
    description: The player whose variable will be set. If multiple players are provided, each of their variables will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Variable
    description: Specifies which of the player's variables to store the value into.
    type: Player Variable
    default: A
  - name: Value
    description: The value that will be stored.
    type:
    - Object
    - Array
    default: Number
  return: Void
  en-US: Set Player Variable
-
  description: Finds or creates an array on a player variable, which is a variable
    that belongs to a specific player, then stores a value in the array at the specified
    index.
  args:
  - name: Player
    description: The player whose variable will be modified. If multiple players are provided, each of their variables will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Variable
    description: Specifies which player variable's value is the array to modify. If the variable's value is not an array, then its value becomes an empty array.
    type: Player Variable
    default: A
  - name: Index
    description: The index of the array to modify. If the index is beyond the end of the array, the array is extended with new elements given a value of zero.
    type: Integer
    default: Number
  - name: Value
    description: The value that will be stored into the array.
    type:
    - Object
    - Array
    default: Number
  return: Void
  en-US: Set Player Variable At Index
-
  description: Enables or disables primary fire for one or more players.
  args:
  - name: Player
    description: The player or players whose access to primary fire is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Enabled
    description: Specifies whether the player or players are able to use primary fire. Expects a boolean value such as true, false, or compare.
    type: Boolean
    default: 'True'
  return: Void
  en-US: Set Primary Fire Enabled
-
  description: Sets the projectile gravity for one or more players to a percentage
    of regular projectile gravity.
  args:
  - name: Player
    description: The player or players whose projectile gravity will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Projectile Gravity Percent
    description: The percentage of regular projectile gravity to which the player or players will set their personal projectile gravity.
    type: Float
    default: Number
  return: Void
  en-US: Set Projectile Gravity
-
  description: Sets the projectile speed for one or more players to a percentage of
    projectile speed.
  args:
  - name: Player
    description: The player or players whose projectile speed will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Projectile Speed Percent
    description: The percentage of regular projectile speed to which the player or players will set their personal projectile speed.
    type: Float
    default: Number
  return: Void
  en-US: Set Projectile Speed
-
  description: Sets the duration between death and respawn for one or more players.
    For players that are already dead when this action is executed, the change takes
    effect on their next death.
  args:
  - name: Player
    description: The player or players whose respawn max time is being defined.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Time
    description: The duration between death and respawn in seconds.
    type: Integer
    default: Number
  return: Void
  en-US: Set Respawn Max Time
-
  description: Enables or disables secondary fire for one or more players.
  args:
  - name: Player
    description: The player or players whose access to secondary fire is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Enabled
    description: Specifies whether the player or players are able to use secondary fire. Expects a boolean value such as true, false, or compare.
    type: Boolean
    default: 'True'
  return: Void
  en-US: Set Secondary Fire Enabled
-
  description: Sets the simulation rate for the entire game, including all players,
    projectiles, effects, and game mode logic.
  args:
  - name: Speed Percent
    description: The simulation rate as a percentage of normal speed. Only rates up to 100% are allowed.
    type: Float
    default: Number
  return: Void
  en-US: Set Slow Motion
-
  description: Applies a status to one or more players. This status will remain in
    effect for the specified duration or until it is cleared by the clear status action.
  args:
  - name: Player
    description: The player or players to whom the status will be applied.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Assister
    description: Specifies a player to be awarded assist credit should the affected player or players be killed while the status is in effect. An assister of null indicates no player will receive credit.
    type: Player
    default: 'Null'
  - name: Status
    description: The status to be applied to the player or players. These behave similarly to statuses applied from hero abilities.
    type: Status
    default: Hacked
  - name: Duration
    description: The duration of the status in seconds. To have a status that lasts until a clear status action is executed, provide an arbitrarily long duration such as 9999.
    type: Float
    default: Number
  return: Void
  en-US: Set Status
-
  description: Sets the score for one or both teams. This action has no effect in
    free-for-all modes or modes without a team score.
  args:
  - name: Team
    description: The team or teams whose score will be set.
    type: Team
    default: Team
  - name: Score
    description: The score that will be set.
    type: Integer
    default: Number
  return: Void
  en-US: Set Team Score
-
  description: Enables or disables the ultimate ability of one or more players.
  args:
  - name: Player
    description: The player or players whose access to their ultimate ability is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Enabled
    description: Specifies whether the player or players are able to use their ultimate ability. Expects a boolean value such as true, false, or compare.
    type: Boolean
    default: 'True'
  return: Void
  en-US: Set Ultimate Ability Enabled
-
  description: Sets the ultimate charge for one or more players as a percentage of
    maximum charge.
  args:
  - name: Player
    description: The player or players whose ultimate charge will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Charge Percent
    description: The percentage of maximum charge.
    type: Float
    default: Number
  return: Void
  en-US: Set Ultimate Charge
-
  description: Skips execution of a certain number of actions in the action list.
  args:
  - name: Number OF Actions
    description: The number of actions to skip, not including this action.
    type: Integer
    default: Number
  return: Void
  en-US: Skip
-
  description: Skips execution of a certain number of actions in the action list if
    this action's condition evaluates to true. If it does not, execution continues
    with the next action.
  args:
  - name: Condition
    description: Specifies whether the skip occurs.
    type: Boolean
    default: Compare
  - name: Number OF Actions
    description: The number of actions to skip, not including this action.
    type: Integer
    default: Number
  return: Void
  en-US: Skip If
-
  description: Displays a small message beneath the reticle that is visible to specific
    players.
  args:
  - name: Visible To
    description: One or more players who will see the message.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Header
    description: The message to be displayed.
    type: Object
    default: String
  return: Void
  en-US: Small Message
-
  description: Starts accelerating one or more players in a specified direction.
  args:
  - name: Player
    description: The player or players that will begin accelerating.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Direction
    description: The unit direction in which the acceleration will be applied. This value is normalized internally.
    type: Direction
    default: Vector
  - name: Rate
    description: The rate of acceleration in meters per second squared. This value may need to be quite high in order to overcome gravity and/or surface friction.
    type: Float
    default: Number
  - name: Max Speed
    description: The speed at which acceleration will stop for the player or players. It may not be possible to reach this speed due to gravity and/or surface friction.
    type: Float
    default: Number
  - name: Relative
    description: Specifies whether direction is relative to world coordinates or the local coordinates of the player or players.
    type: Relativity
    default: To World
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. This action will keep asking for and using new values from reevaluated inputs.
    type: Acceleration Reevaluation
    default: Direction, Rate, And Max Speed
  return: Void
  en-US: Start Accelerating
-
  description: Places your camera at a location, facing a direction.
  args:
  - name: Player
    description: The player or players whose cameras will be placed at the location.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Eye Position
    description: The position of the camera. Reevaluates continuously.
    type: Position
    default: Vector
  - name: Look At Position
    description: Where the camera looks at. Reevaluates continuously.
    type: Position
    default: Vector
  - name: Blend Speed
    description: How fast to blend the camera speed as positions change. 0 means do not blend at all, and just change positions instantly.
    type: Float
    default: Number
  return: Void
  en-US: Start Camera
-
  description: Starts modifying how much damage one or more receivers will receive
    from one or more damagers. A reference to this damage modification can be obtained
    from the last damage modification id value. This action will fail if too many
    damage modifications have been started.
  args:
  - name: Receivers
    description: The player or players whose incoming damage will be modified (when attacked by the damagers).
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Damagers
    description: The player or players whose outgoing damage will be modified (when attacking the receivers).
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Damage Percent
    description: The percentage of damage that will apply to receivers when attacked by damagers.
    type: Float
    default: Number
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. This action will keep asking for and using new values from reevaluated inputs.
    type: DamageReeval
    default: Receivers, Damagers, And Damage Percent
  return: Void
  en-US: Start Damage Modification
-
  description: Starts an instance of damage over time. This dot will persist for the
    specified duration or until stopped by script. To obtain a reference to this dot,
    use the last damage over time id value.
  args:
  - name: Player
    description: One or more players who will receive the damage over time.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Damager
    description: The player who will receive credit for the damage. A damager of null indicates no player will receive credit.
    type: Player
    default: 'Null'
  - name: Duration
    description: The duration of the damage over time in seconds. To have a dot that lasts until stopped by script, provide an arbitrarily long duration such as 9999.
    type: Float
    default: Number
  - name: Damage Per Second
    description: The damage per second for the damage over time.
    type: Float
    default: Number
  return: Void
  en-US: Start Damage Over Time
-
  description: Starts turning one or more players to face the specified direction.
  args:
  - name: Player
    description: The player or players who will start turning.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Direction
    description: The unit direction in which the player or players will eventually face. This value is normalized internally.
    type: Direction
    default: Vector
  - name: Turn Rate
    description: The turn rate in degrees per second.
    type: Float
    default: Number
  - name: Relative
    description: Specifies whether direction is relative to world coordinates or the local coordinates of the player or players.
    type: Relativity
    default: To World
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. This action will keep asking for and using new values from reevaluated inputs.
    type: Facing Reevaluation
    default: Direction And Turn Rate
  return: Void
  en-US: Start Facing
-
  description: Starts forcing one or more players to be a specific hero and, if necessary,
    respawns them immediately in their current location. This will be the only hero
    available to the player or players until the stop forcing player to be hero action
    is executed.
  args:
  - name: Player
    description: The player or players who will be forced to be a specific hero.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Hero
    description: The hero that the player or players will be forced to be.
    type: Hero
    default: Hero
  return: Void
  en-US: Start Forcing Player To Be Hero
-
  description: Starts forcing a player to be in a given position. If reevaluation
    is enabled, then the position is evaluated every frame, allowing the player to
    be moved around over time.
  args:
  - name: Player
    description: The player whose position will be forced. (The reevaluation option does not apply to this value.)
    type: Player
    default: Event Player
  - name: Position
    description: The position the player will occupy. If reevaluation is enabled, this value can be used to move the player around over time.
    type: Position
    default: Vector
  - name: REEVALUATE
    description: If this value is true, then the position will be reevaluated and applied to the player every frame. If this value is false, then the posiiton is only evaluated once when the action begins.
    type: Boolean
    default: 'True'
  return: Void
  en-US: Start Forcing Player Position
-
  description: Forces a team to spawn in a particular spawn room, regardless of the
    spawn room normally used by the game mode. This action only has an effect in assault,
    hybrid, and payload maps.
  args:
  - name: Team
    description: The team whose spawn room will be forced.
    type: Team
    default: Team
  - name: Room
    description: The number of the spawn room to be forced. 0 is the first spawn room, 1 the second, and 2 is the third. If the specified spawn room does not exist, players will use the normal spawn room.
    type: Integer
    default: Number
  return: Void
  en-US: Start Forcing Spawn Room
-
  description: Defines minimum and maximum movement input values for one or more players,
    possibly forcing or preventing movement.
  args:
  - name: Player
    description: The player or players whose movement will be forced or limited.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Min Forward
    description: Sets the minimum run forward amount. 0 allows the player or players to stop while 1 forces full forward movement.
    type: Float
    default: Number
  - name: Max Forward
    description: Sets the maximum run forward amount. 0 prevents the player or players from moving forward while 1 allows full forward movement.
    type: Float
    default: Number
  - name: Min Backward
    description: Sets the minimum run backward amount. 0 allows the player or players to stop while 1 forces full backward movement.
    type: Float
    default: Number
  - name: Max Backward
    description: Sets the maximum run backward amount. 0 prevents the player or players from moving backward while 1 allows full backward movement.
    type: Float
    default: Number
  - name: Min Sideways
    description: Sets the minimum run sideways amount. 0 allows the player or players to stop while 1 forces full sideways movement.
    type: Float
    default: Number
  - name: Max Sideways
    description: Sets the maximum run sideways amount. 0 prevents the player or players from moving Sideways while 1 allows full sideways movement.
    type: Float
    default: Number
  return: Void
  en-US: Start Forcing Throttle
-
  description: Starts an instance of heal over time. This hot will persist for the
    specified duration or until stopped by script. To obtain a reference to this hot,
    use the last heal over time id value.
  args:
  - name: Player
    description: One or more players who will receive the heal over time.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Healer
    description: The player who will receive credit for the healing. A healer of null indicates no player will receive credit.
    type: Player
    default: 'Null'
  - name: Duration
    description: The duration of the heal over time in seconds. To have a hot that lasts until stopped by script, provide an arbitrarily long duration such as 9999.
    type: Float
    default: Number
  - name: Healing Per Second
    description: The healing per second for the heal over time.
    type: Float
    default: Number
  return: Void
  en-US: Start Heal Over Time
-
  description: Starts modifying how much healing one or more receivers will receive
    from one or more healers. A reference to this healing modification can be obtained
    from the last healing modification id value. This action will fail if too many
    healing modifications have been started.
  args:
  - name: Receivers
    description: The player or players whose incoming healing will be modified (when healed by the healers).
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Healers
    description: The player or players whose outgoing healing will be modified (when healing the receivers).
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Healing Percent
    description: The percentage of healing that will apply to receivers when healed by healers.
    type: Float
    default: Number
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. This action will keep asking for and using new values from reevaluated inputs.
    type: HealingReeval
    default: Receivers, Healers, And Healing Percent
  return: Void
  en-US: Start Healing Modification
-
  description: Forces one or more players to hold a button virtually until stopped
    by the stop holding button action.
  args:
  - name: Player
    description: The player or players who are holding a button virtually.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Button
    description: The logical button that is being held virtually.
    type: Button
    default: Primary Fire
  return: Void
  en-US: Start Holding Button
-
  description: Begins simultaneous execution of a subroutine rule (which is a rule
    with a Subroutine event type). Execution of the original rule continues uninterrupted.
    The subroutine will have access to the same contextual values (such as Event Player)
    as the original rule.
  args:
  - name: Subroutine
    description: Specifies which subroutine to start. If a rule with a subroutine event type specifies the same subroutine, then it will execute. Otherwise, this action is ignored.
    type: Subroutine
    default: Sub0
  - name: If ALREADY EXECUTING
    description: Determines what should happen if the rule specified by the subroutine is already executing on the same player or global entity.
    type: AsyncBehavior
    default: RESTART RULE
  return: Void
  en-US: Start Rule
-
  description: Sets or adds to the throttle (directional input control) of a player
    or players such that they begin moving in a particular direction. Any previous
    throttle in direction is cancelled.
  args:
  - name: Player
    description: The player or players whose throttle will be set or added to.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Direction
    description: The unit direction in which the throttle will be set or added to. This value is normalized internally.
    type: Direction
    default: Vector
  - name: Magnitude
    description: The amount of throttle (or change to throttle). A value of 1 denotes full throttle.
    type: Float
    default: Number
  - name: Relative
    description: Specifies whether direction is relative to world coordinates or the local coordinates of the player or players.
    type: Relativity
    default: To World
  - name: Behavior
    description: Specifies whether preexisting throttle is replaced or added to.
    type: Throttle
    default: Replace Existing Throttle
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. This aciton will keep asking for and using new values from reevaluated inputs.
    type: ThrottleReeval
    default: Direction And Magnitude
  return: Void
  en-US: Start Throttle In Direction
-
  description: Starts transforming (scaling and rotating) the throttle (directional
    input control) of a player or players. Cancels any existing start transforming
    throttle behavior.
  args:
  - name: Player
    description: The player or players whose throttle will be transformed.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: X Axis Scalar
    description: The player or players will have their throttle X axis (left to right) multiplied by this value before the throttle is rotated to its new relative direction. This value is evaluated continuously (meaning it updates every frame).
    type: Float
    default: Number
  - name: Y Axis Scalar
    description: The player or players will have their throttle Y axis (front to back) multiplied by this value before the throttle is rotated to its new relative direction. This value is evaluated continuously (meaning it updates every frame).
    type: Float
    default: Number
  - name: Relative Direction
    description: After the axis scalars are applied, the player or players will have their throttle transformed so that it is relative to this unit direction vector. For example, to make the throttle camera relative, provide the direction that the camera is facing. This value is evaluated continuously (meaning it updates every frame) and normalized internally.
    type: Direction
    default: Vector
  return: Void
  en-US: Start Transforming Throttle
-
  description: Stops the acceleration started by the start accelerating action for
    one or more players.
  args:
  - name: Player
    description: The player or players who will stop accelerating.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop Accelerating
-
  description: Stops all damage modifications that were started using the start damage
    modification action.
  return: Void
  en-US: Stop All Damage Modifications
-
  description: Stops all healing modifications that were started using the start healing
    modification action.
  return: Void
  en-US: Stop All Healing Modifications
-
  description: Stops all damage over time started by start damage over time for one
    or more players.
  args:
  - name: Player
    description: The player or players whose scripted damage over time will stop.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop All Damage Over Time
-
  description: Stops all heal over time started by start heal over time for one or
    more players.
  args:
  - name: Player
    description: The player or players whose scripted heal over time will stop.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop All Heal Over Time
-
  description: Restores the camera to the default view.
  args:
  - name: Player
    description: The player or players whose cameras will be put back to the default view.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop Camera
-
  description: Stops an in-progress chase of a global variable, leaving it at its
    current value.
  args:
  - name: Variable
    description: Specifies which global variable to stop modifying.
    type: Global Variable
    default: A
  return: Void
  en-US: Stop Chasing Global Variable
-
  description: Stops an in-progress chase of a player variable, leaving it at its
    current value.
  args:
  - name: Player
    description: The player whose variable will stop changing. If multiple players are provided, each of their variables will stop changing.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Variable
    description: Specifies which of the player's variables to stop modifying.
    type: Player Variable
    default: A
  return: Void
  en-US: Stop Chasing Player Variable
-
  description: Stops a damage modification that was started by the start damage modification
    action.
  args:
  - name: Damage Modification
    description: Specifies which damage modification instance to stop. This id may be last damage modification id or a variable into which last damage modification id was earlier stored.
    type: DamageModificationId
    default: Last Damage Modification ID
  return: Void
  en-US: Stop Damage Modification
-
  description: Stops an instance of damage over time started by the start damage over
    time action.
  args:
  - name: Damage Over Time ID
    description: Specifies which damage over time instance to stop. This id may be last damage over time id or a variable into which last damage over time id was earlier stored.
    type: Damage Over Time ID
    default: Last Damage Over Time ID
  return: Void
  en-US: Stop Damage Over Time
-
  description: Stops the turning started by the start facing action for one or more
    players.
  args:
  - name: Player
    description: The player or players who will stop turning.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop Facing
-
  description: Stops forcing one or more players to be a specific hero. This will
    not respawn the player or players, but it will restore their hero availability
    the next time they go to select a hero.
  args:
  - name: Player
    description: The player or players who will no longer be forced to be a specific hero.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop Forcing Player To Be Hero
-
  description: Cancels the behavior of `startForcingPosition()` for the specified
    player or players. Regular movement will resume from the last forced position(s).
  args:
  - name: Player
    description: The player or players whose positions will stop being forced.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop Forcing Player Position
-
  description: Undoes the effect of the start forcing spawn room action for the specified
    team.
  args:
  - name: Team
    description: The team that will resume using their normal spawn room.
    type: Team
    default: Team
  return: Void
  en-US: Stop Forcing Spawn Room
-
  description: Undoes the effect of the start forcing throttle action for one or more
    players.
  args:
  - name: Player
    description: The player or players whose movement input will be restored.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop Forcing Throttle
-
  description: Stops an instance of heal over time started by the start heal over
    time action.
  args:
  - name: HEAL Over Time ID
    description: Specifies which heal over time instance to stop. This id may be last heal over time id or a variable into which last heal over time id was earlier stored.
    type: HotId
    default: Player Variable
  return: Void
  en-US: Stop Heal Over Time
-
  description: Stops a healing modification that was started by the start healing
    modification action.
  args:
  - name: Healing Modification ID
    description: Specifies which healing modification instance to stop. This id may be last healing modification id or a variable into which last healing modification id was earlier stored.
    type: HealingModificationId
    default: Last Healing Modification ID
  return: Void
  en-US: Stop Healing Modification
-
  description: Undoes the effect of the start holding button action for one or more
    players.
  args:
  - name: Player
    description: The player or players who are no longer holding a button virtually.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Button
    description: The logical button that is no longer being held virtually.
    type: Button
    default: Primary Fire
  return: Void
  en-US: Stop Holding Button
-
  description: Cancels the behavior caused by start throttle in direction.
  args:
  - name: Player
    description: The player or players whose default throttle control will be restored.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop Throttle In Direction
-
  description: Stops the throttle transform started by start transforming throttle
    for one or more players.
  args:
  - name: Player
    description: The player or players whose throttle will stop being transformed.
    type:
    - Player
    - Array: Player
    default: Event Player
  return: Void
  en-US: Stop Transforming Throttle
-
  description: Teleports one or more players to the specified position.
  args:
  - name: Player
    description: The player or players to teleport.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Position
    description: The position to which the player or players will teleport. If a player is provided, the position of the player is used.
    type: Position
    default: Vector
  return: Void
  en-US: Teleport
-
  description: Unpauses the match time.
  return: Void
  en-US: Unpause Match Time
-
  description: Pauses the execution of the action list. Unless the wait is interrupted,
    the remainder of the actions will execute after the pause.
  args:
  - name: Time
    description: The duration of the pause.
    type: Float
    default: Number
  - name: Wait Behavior
    description: Specifies if and how the wait can be interrupted. If the condition list is ignored, the wait will not be interrupted. Otherwise, the condition list will determine if and when the action list will abort or restart.
    type: Wait
    default: Ignore Condition
  return: Void
  en-US: Wait
-
  description: Denotes the beginning of a series of actions that will execute in a
    loop as long as the specified condition is true. The next end action at the current
    level denotes the end of the loop. If the condition evaluates to false when execution
    is at the top of the loop, then the loop exits, and execution jumps to the next
    action after the end action.
  args:
  - name: Condition
    description: If this evaluates to true, execution continues with the next action. Otherwise, execution jumps to the next end action at the current level.
    type: Boolean
    default: Compare
  return: Void
  en-US: While
-
  description: Set the ammo of one or more Players.
  args:
  - name: Player
    description: The player or players whose ammo will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Clip
    description: The index of the clip whose ammo will be set. 0 Is the first clip, and 1 is the second. If the specified type does not exist, this will do nothing.
    type: Integer
    default: 0
  - name: Ammo
    description: The ammo that will be set.
    type: Integer
    default: 0
  return: Void
  en-US: Set Ammo
-
  description: Set the max ammo of one or more Players.
  args:
  - name: Player
    description: The player or players whose max ammo will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Clip
    description: The index of the clip whose ammo will be set. 0 Is the first clip, and 1 is the second. If the specified type does not exist, this will do nothing.
    type: Integer
    default: 0
  - name: Ammo
    description: The max ammo that will be set.
    type: Integer
    default: 0
  en-US: Set Max Ammo
-
  description: Sets the weapon of one or more Players.
  args:
  - name: Player
    description: The player or players whose weapon will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Weapon
    description: The number of the weapon to be equipped. 1 Is the first weapon, and 2 is the second. If the specified weapon does not exist, players will use the default weapon.
    type: Integer
    default: 0
  en-US: Set Weapon
-
  description: Enables or disables Reload for one or more Players.
  args:
  - name: Player
    description: The Player or Players whose access to reload is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Enabled
    description: Specifies whether the Player or Players are able to use reload. Expects a boolean value such as True, False, or Compare.
    type: Boolean
    default: True
  en-US: Set Reload Enabled
-
  description: Disables the Game Mode HUD for one or more Players until reenabled.
  args:
  - name: Player
    description: The Player or Players who will have their Game Mode HUD disabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Disable Game Mode HUD
-
  description: Undoes the effect of the Disable Game Mode HUD Action for one or more Players.
  args:
  - name: Player
    description: The Player or Players who will have their Game Mode HUD enabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Enable Game Mode HUD
-
  description: Disables the Game Mode In-World UI for one or more Players until reenabled.
  args:
  - name: Player
    description: The Player or Players who will have their Game Mode In-World UI disabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Disable Game Mode In-World UI
-
  description: Undoes the effect of the Disable Game Mode In-World UI Action for one or more Players.
  args:
  - name: Player
    description: The Player or Players who will have their Game Mode In-World UI enabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Enable Game Mode In-World UI
-
  description: Disables the Hero HUD for one or more Players until reenabled.
  args:
  - name: Player
    description: The Player or Players who will have their Hero HUD disabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Disable Hero HUD
-
  description: Undoes the effect of the Disable Hero HUD Action for one or more Players.
  args:
  - name: Player
    description: The Player or Players who will have their Hero HUD enabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Enable Hero HUD
-
  description: Disables the Kill Feed for one or more Players until reenabled.
  args:
  - name: Player
    description: The Player or Players who will have their Kill Feed disabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Disable Kill Feed
-
  description: Undoes the effect of the Disable Kill Feed Action for one or more Players.
  args:
  - name: Player
    description: The Player or Players who will have their Kill Feed enabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Enable Kill Feed
-
  description: Disables Messages for one or more Players until reenabled.
  args:
  - name: Player
    description: The Player or Players who will have their Messages disabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Disable Messages
-
  description: Undoes the effect of the Disable Messages Action for one or more Players.
  args:
  - name: Player
    description: The Player or Players who will have their Messages enabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Enable Messages
-
  description: Disables the Scoreboard for one or more Players until reenabled.
  args:
  - name: Player
    description: The Player or Players who will have their Scoreboard disabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Disable Scoreboard
-
  description: Undoes the effect of the Disable Scoreboard Action for one or more Players.
  args:
  - name: Player
    description: The Player or Players who will have their Scoreboard enabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Enable Scoreboard
-
  description: Set the Ability Charge Count for one or more Players if supported.
  args:
  - name: Player
    description: The Player or Players whose ability charge count will be modified.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Button
    description: The logical button associated with the Ability to be modified.
    type: Button
    default: Primary Fire
  - name: Charge Count
    description: The Charge count that will be set.
    type: Integer
    default: 0
  en-US: Set Ability Charge
-
  description: Set the Ability Resource Percentage for one or more Players if supported.
  args:
  - name: Player
    description: The Player or Players whose Ability Resource Percentage will be modified.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Button
    description: The logical button associated with the Ability to be modified.
    type: Button
    default: Primary Fire
  - name: Resource Percent
    description: The Percentage of Resource that will be set with respect to each Player's Ability Resource capacity.
    type: Float
    default: 0
  en-US: Set Ability Resource
-
  description: Sets the jump vertical speed of one or more Players to a percentage of their raw jump vertical speed.
  args:
  - name: Player
    description: The Player or Players whose jump vertical speed will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Jump Vertical Speed Percent
    description: The Percentage of Resource that will be set with respect to each Player's Ability Resource capacity.
    type: Float
    default: 100
  en-US: Set Jump Vertical Speed
-
  description: Disables the nameplate on one or more Viewed Players from the perspective of one or more Viewing Players.
  args:
  - name: Viewed Players
    description: The Player or Players who will have their Nameplates disabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Viewing Players
    description: The Viewing Player or Players for whom the viewed Player's nameplate will be disabled.
    type:
    - Player
    - Array: Player
    default: All Players
  en-US: Disable Nameplates
-
  description: Undoes the effect of Disable Nameplates for one or more Viewed Players from the perspective of one or more Viewing Players.
  args:
  - name: Viewed Players
    description: The Player or Players who will have their Nameplates enabled.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Viewing Players
    description: The Viewing Player or Players for whom the viewed Player's nameplate will be enabled.
    type:
    - Player
    - Array: Player
    default: All Players
  en-US: Enable Nameplates
-
  description: Starts forcing the visibility and color of Player Outlines for the specified Viewed Player or Players from the perspective of one or more Viewing Players.
  args:
  - name: Viewed Players
    description: The Player or Players who will have their outlines modified.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Viewing Players
    description: The Viewing Player or Players for whom the viewed Player's outlines will be modified.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Visible
    description: Whether or not the specified Player Outlines should be visible.
    type: Boolean
    default: True
  - name: Color
    description: The color of the specified Player Outlines if they are visible. If a particular team is chosen, the color will either be Red or Blue, depending on whether the team is hostile to the viewer.
    type: Color
    default: Color
  - name: Type
    description: The type of the specified Player Outlines if they are visible
    type: Outline
    default: Default
  en-US: Start Forcing Player Outlines
-
  description: Cancels the behavior of Start Forcing Player Outlines for the spciefied Viewed Player or Players from the perspective of one or more Viewing Players.
  args:
  - name: Viewed Players
    description: The Player or Players who will have their outlines reset.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Viewing Players
    description: The Viewing Player or Players for whom the viewed Player's outlines will be reset.
    type:
    - Player
    - Array: Player
    default: All Players
  en-US: Stop Forcing Player Outlines
-
  description: Start modifying the size of a Player or Players (including mode, movement collision, hit detection, and certain abilities). Note that large players placed into complex environments will severely impact server load, so consider also applying the Disable Movement Collision With Environment action.
  args:
  - name: Player
    description: The Player or Players whose size will be modified.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Scale
    description: The multiplier applied to the size of the player or players (So 0.5 halves the size, 2.0 doubles the size, etc.).
    type: Float
    default: 1
  - name: Reevaluation
    description: If this value is True, then scale will be Reevaluated and applied to the Player or Players every frame. If this value is False, then the scale is only avaluated once when the action begins.
    type: Boolean
    default: True
  en-US: Start Scaling Player
-
  description: Stops overring the size of a Player or Players.
  args:
  - name: Player
    description: The Player or Players whose size will stop being overridden.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Stop Scaling Player
-
  description: Start modifying the size of barriers for a Player or Players.
  args:
  - name: Player
    description: The Player or Players whose barriers will have their size modified.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Scale
    description: The multiplier applied to the size of the barriers (So 0.5 halves the size, 2.0 doubles the size, etc.).
    type: Float
    default: 1
  - name: Reevaluation
    description: If this value is True, then scale will be Reevaluated and applied to the Player or Players every frame. If this value is False, then the scale is only avaluated once when the action begins.
    type: Boolean
    default: True
  en-US: Start Scaling Barriers
-
  description: Stops overring the size of barriers of a Player or Players.
  args:
  - name: Player
    description: The Player or Players whose barriers will stop having their size being overridden.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Stop Scaling Barriers
-
  description: Causes a Player or Players to stop colliding with the environment (walls, ceilings, certain objects, etc.)
  args:
  - name: Player
    description: The Player or Players whose movement collision is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Include Floors
    description: If True, collision with the floors is also disabled.
    type: Boolean
    default: False
  en-US: Disable Movement Collision With Environment
-
  description: Undoes the effect of the Disable Movement Collision With Environment action for one or more Players.
  args:
  - name: Player
    description: The Player or Players whose movement collision is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Enable Movement Collision With Environment
-
  description: Causes a Player or Players to stop colliding with other Players.
  args:
  - name: Player
    description: The Player or Players whose movement collision is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Disable Movement Collision With Players
-
  description: Undoes the effect of the Disable Movement Collision With Players action for one or more Players.
  args:
  - name: Player
    description: The Player or Players whose movement collision is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Enable Movement Collision With Players
-
  description: Modifies the way hero voice lines sound for a Player or Players.
  args:
  - name: Player
    description: The Player or Players whose movement collision is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Pitch Scalar
    description: The amount that the pitch of the voice will be raised. (Up to 1.5) or lowered (Down to 0.5).
    type: Float
    default: 0
  - name: Reevaluation
    description: If True, Pitch Scalar is evaluated and updated every frame. If False, Pitch Scalar is evaluated once when the actions executes.
    type: Boolean
    default: True
  en-US: Start Modifying Hero Voice Lines
-
  description: Undoes the effect of the Starting Modifying Hero Voice Lines action for one or more Players.
  args:
  - name: Player
    description: The Player or Players whose movement collision is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Stop Modifying Hero Voice Lines
-
  description: Adds a temporary health pool to a Player or Players. This health pool can be referenced using the Last Created Health Pool value. Up to 16 health pools of a given health type (Health, Armor, or Shields) may exist on a player (including base pools and pools generated by abilities).
  args:
  - name: Player
    description: The Player or Players whose movement collision is affected.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Health Type
    description: Specifies the type of health (Armor or shields) contained in the Health Pool.
    type:
    - Health Type
    - Array: Health of Type
    default: Armor
  - name: Max Health
    description: The size of the Health Pool
    type: Float
    default: 100
  - name: Recoverable
    description: Whether health in this pool can be healed once it is lost. If this is value is False, then the Health Pool will shrink and disappear as it is damaged.
    type: Boolean
    default: True
  - name: Reevaluation
    description: If True and Recoverable is also True, then Max Health will be reevaluated every frame, if False or Recoverable is False, then Max Health is only evaluated once when this action executes.
    type: Boolean
    default: True
  en-US: Add Health Pool To Player
-
  description: Removes a health pool that was added via the Add Health Pool action.
  args:
  - name: Health Pool ID
    description: Specifies a Health Pool created by the Add Health Pool action. (Health pool IDs may be obtained using the Last Created Health Pool Value.)
    type: Integer
    default: Last Created Health Pool
  en-US: Remove Health Pool From Player
-
  description: Removes all health pools that were added to a Player or Players via the Add Health Pool action.
  args:
  - name: Player
    description: The Player or Players whose added Health Pools will be removed.
    type:
    - Player
    - Array: Player
    default: Event Player
  en-US: Remove All Health Pools From Player
-
  description: Sets the health of a Player or Players without affecting stats or granting damage/healing credit. This action only has an effect on living players. (For dead players, use the Resurrect Player action instead.)
  args:
  - name: Player
    description: The Player or Players whose Health will be set.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Amount
    description: How much health the Player or Players will have.
    type: Float
    default: 1
  en-US: Set Player Health
-
  description: Causes the Workshop Inspector to record a log entry.
  args:
  - name: Text
    description: The String to be logged to the Workshop Inspector.
    type: Object
    default: 'Null'
  en-US: Log To Inspector
-
  description: Waits until the Continue Condition is true or Timeout seconds elapse. (The Rule's Condition is ignored during this wait.)
  args:
  - name: Continue Condition
    description: If this value becomes true, the wait concludes, and the next action in the action list begins executing.
    type: Boolean
    default: False
  - name: Timeout
    description: If this many seconds elapse, the wait concludes, and the next action in the action list begins executing.
    type: Integer
    default: 0
  en-US: Wait Until
-
  description: Sets the knockback dealt of one or more Players to a percentage of their raw knockback dealt.
  args:
  - name: Player
    description: The Player or Players whose knockback dealt will be set.
    type:
      - Player
      - Array: Player
    default: Event Player
  - name: Knockback Dealt Percentage
    description: The percentage of raw knockback dealt to which the Player or Players will set their knockback dealt.
    type: Integer
    default: 100
  en-US: Set Knockback Dealt
-
  description: Sets the knockback received of one or more Players to a percentage of their raw knockback received.
  args:
  - name: Player
    description: The Player or Players whose knockback received will be set.
    type:
      - Player
      - Array: Player
    default: Event Player
  - name: Knockback Dealt Percentage
    description: The percentage of raw knockback received to which the Player or Players will set their knockback dealt.
    type: Integer
    default: 100
  en-US: Set Knockback Received
-
  description: Sets the Player who will received credit if the specified target Player or Players die to the environment before landing on the ground.
  args:
  - name: Target
    description: The target Player or Players whose death is being considered.
    type:
    - Player
    - Array: Player
    default: Event Player
  - name: Environment Credit Player
    description: The Player who will received credit if the target Player or Players die to the environment before landing on the ground. An Environment Credit Player of Null indicates no Player will receive credit.
    type:
    - Player
    - Array: Player
    default: 'Null'
  en-US: Set Environment Credit Player
-
  description: Starts granting assist credit toward to one or more Assisters when one or more Targets are eliminated. A reference to this damage modification can be obtained from the Last Assist ID Value. This Action will fail if too many assists have been started.
  args:
  - name: Assisters
    description: The target Player or Players who will receive assist credit.
    type:
      - Player
      - Array: Player
    default: Event Player
  - name: Targets
    description: The Player or Players whose eliminations will grant assist credit to the Assisters. If the Target or Targets are allied to the Assister, this will be a defensive assist. Otherwise, this will be an offensive assist.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Reevaluation
    description: Specifies which of this Action's Inputs will be continously reevaluated. This Action will keep asking for and using new Values from reevaluated Inputs.
    type: Chase Reevaluation
    default: Assisters and Targets
  en-US: Start Assist
-
  description: Stops an assist that was started by the Start Assist Action.
  args:
  - name: Assist ID
    description: Specifies which assist instance to stop. This ID may be Last Assist ID or a Variable into which Last Assist ID was earlier stored.
    type: AssistId
    default: Last Assist ID
  en-US: Stop Assist
-
  description: Stops all assists that were started using the Start Assist Action.
  en-US: Stop All Assists
-
  description: Creates Progress Bar HUD text visible to specified Players at a specific location on the screen. This text will persist until destroyed. To obtain a reference to this text, use the Last Text ID Value. This action will fail if too many text elements have been created.
  args:
  - name: Visible To
    description: One or more Players who will see the Progress Bar HUD text.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Value
    description: The value of the progress bar to be displayed as a percentage from 0 to 100.
    type: Float
    default: 0
  - name: Text
    description: The text to be displayed (can be blank)
    type: Object
    default: Custom String("")
  - name: Location
    description: The location on the screen where the text will appear.
    type: HUD Position
    default: Left
  - name: Sort Order
    description: The sort order of the text relative to other text in the same location. Text with a higher sort order will come after the text with a lower sort order.
    type: Float
    default: 0
  - name: Progress Bar Color
    description: The color of the Progress Bar text to be created. If a particular team is chosen, the effect will either be red or blue, depending on whether the team is hostile to the viewer.
    type: Color
    default: Color
  - name: Text Color
    description: The color of the text to be created. If a particular team is chosen, the effect will either be red or blue, depending on whether the team is hostile to the viewer.
    type: Color
    default: Color
  - name: Reevaluation
    description: Specifies which of this Action's Inputs will be continuously reevaluated. The text will keep asking for and using new Values from reevaluated Inputs.
    type: HUD Reevaluation
    default: Visible To Values and Color
  - name: Non-Team Spectators
    description: Whether non-team spectators can see the text or not.
    type: Spectator Visibility
    default: Default Visibility
  en-US: Create Progress Bar HUD Text
-
  description: Destroys Progress Bar HUD text that was created by Create Progress Bar HUD Text.
  args:
  - name: Text ID
    description: Specifies which Progress Bar HUD text to destroy. This ID may be Last Text ID or a Variable into which Last Text ID was earlier stored.
    type: Text ID
    default: Last Text ID
  en-US: Destroy Progress Bar HUD Text
-
  description: Destroys all Progress Bar HUD text that were created by the Create Progress Bar HUD Text Action.
  en-US: Destroy All Progress Bar HUD Text
-
  description: Creates Progress Bar HUD text visible to the specific Players at a specific position in the world. This text will persist until destroyed. To obtain a reference to this text, use the Last Text ID Value. This Action will fail if too many text elements have been created.
  args:
  - name: Visible To
    description: One or more Players who will see the Progress Bar HUD text.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Value
    description: The value of the progress bar to be displayed as a percentage from 0 to 100.
    type: Float
    default: 0
  - name: Text
    description: The text to be displayed (can be blank)
    type: Object
    default: Custom String("")
  - name: Position
    description: The text's position. If this value is a player, then the text will appear above the player's head. Otherwise, the value is interpreted as a position in the world.
    type: Position
    default: Event Player
  - name: Scale
    description: The text's scale.
    type: Float
    default: Number
  - name: Clipping
    description: Specifies whether the text can be seen through walls or is instead clipped.
    type: Clip
    default: Clip Against Surfaces
  - name: Progress Bar Color
    description: The color of the Progress Bar text to be created. If a particular team is chosen, the effect will either be red or blue, depending on whether the team is hostile to the viewer.
    type: Color
    default: Color
  - name: Text Color
    description: The color of the text to be created. If a particular team is chosen, the effect will either be red or blue, depending on whether the team is hostile to the viewer.
    type: Color
    default: Color
  - name: Reevaluation
    description: Specifies which of this Action's Inputs will be continuously reevaluated. The text will keep asking for and using new Values from reevaluated Inputs.
    type: HUD Reevaluation
    default: Visible To Values and Color
  - name: Non-Team Spectators
    description: Whether non-team spectators can see the text or not.
    type: Spectator Visibility
    default: Default Visibility
  en-US: Create Progress Bar In-World Text
-
  description: Destroys Progress Bar In-World text that was created by Create Progress Bar In-World Text.
  args:
  - name: Text ID
    description: Specifies which Progress Bar In-World text to destroy. This ID may be Last Text ID or a Variable into which Last Text ID was earlier stored.
    type: Text ID
    default: Last Text ID
  en-US: Destroy Progress Bar In-World Text
-
  description: Destroys all Progress Bar In-World text that were created by the Create Progress Bar In-World Text Action.
  en-US: Destroy All Progress Bar In-World Text
-
  description: Undoes the effect of the Disable Text Chat Action for one or more Players.
  args:
  - name: Player
    description: The Player or Players who will have their Text Chat enabled.
    type: Player
    default: Event Player
  en-US: Enable Text Chat
-
  description: Disables Text Chat for one or more Players until reenabled.
  args:
  - name: Player
    description: The Player or Players who will have their Text Chat disabled.
    type: Player
    default: Event Player
  en-US: Disable Text Chat
-
  description: Undoes the effect of the Disable Voice Chat Action for one or more Players.
  args:
  - name: Player
    description: The Player or Players who will have their Voice Chat enabled.
    type: Player
    default: Event Player
  en-US: Enable Voice Chat
-
  description: Disables Voice Chat for one or more Players until reenabled.
  args:
  - name: Player
    description: The Player or Players who will have their Voice Chat disabled.
    type: Player
    default: Event Player
  - name: Team Voice Chat
    description: Whether or not Team Voice Chat will be disabled.
    type: Boolean
    default: True
  - name: Match Voice Chat
    description: Whether or not Match Voice Chat will be disabled.
    type: Boolean
    default: True
  - name: Group Voice Chat
    description: Whether or not Group Voice Chat will be disabled.
    type: Boolean
    default: True
  en-US: Disable Voice Chat
-
  description: Starts the Game Mode. This action doesn't have an effect if the game is already in progress.
  en-US: Start Game Mode
-
  description: Returns the Game Mode back to the Custom Game Lobby.
  en-US: Return To Lobby
-
  description: Restarts the Match. This action only has an effect after the match has existed for 30 seconds.
  en-US: Restart Match
-
  description: Move one or more Players to the specified Team and Slot. This action can fail if the specified slot is not available. This action doesn't work on Dummy Bots.
  args:
  - name: Player
    description: The Player or Players to move.
    type: Player
    default: Event Player
  - name: Team
    description: The team on which to move the Player. The "all" option only works in free-for-all game modes, while the "team" options only work in team-based game modes.
    type: Team
    default: All
  - name: Slot
    description: The player slot which will receive the Player (-1 for first available slot).
    type: Integer
    default: -1
  en-US: Move Player To Team
-
  description: Removes one or more Players from the Custom Game. This action doesn't work on Dummy Bots.
  args:
  - name: Player
    description: The Player or Players to remove.
    type: Player
    default: Event Player
  en-US: Remove Player
-
  description: Starts forcing the name for the specified Player or Players.
  args:
  - name: Player
    description: The Player whose name will be forced.
    type: Player
    default: Event Player
  - name: Name
    description: The name to be forced.
    type: String
    default: Custom String("")
  en-US: Start Forcing Dummy Bot Name
-
  description:
  args:
  - name: Player
    description: The Player or Players whose names will stop being forced
    type: Player
    default: Event Player
  en-US: Stop Forcing Dummy Bot Name
-
  description: Create a projectile entity that either heals or damages players and player owned entities. This action will fail if too many entities have been created.
  en-US: Create Projectile
  args:
  - name: Projectile Type
    description: Type of projectile to be created. New options can be added to this list by enabling the Projectiles Workshop Extension.
    type: Projectile Effect
    default: Orb Projectile
  - name: Player
    description: The player who owns this projectile and will receive credit for kills. If null, the projectile will be owned by nobody. The projectile will not affect its owner.
    type: Player
    default: Event Player
  - name: Start Position
    description: The start position of the projectile. If null, the player's eye position will be used.
    type: Position
    default: "Null"
  - name: Direction
    description: The direction for the projectile to travel. If null, the player's facing direction will be used.
    type: Direction
    default: "Null"
  - name: Relative
    description: Whether the projectile's start position and direction are relative to the player or to the world.
    type: Relativity
    default: To World
  - name: Modify Health Type
    description: Whether the projectile will heal or damage targets it collides with.
    type: Modify Health Type
    default: Damage
  - name: Affected Team
    description: Which team the projectile will collide with. The projectile will never affect its owner regardless of team.
    type: Team
    default: Team
  - name: Amount
    description: The amount of damage or healing the projectile will apply to targets it collides with. If explosion radius is set to an amount greater than 0, this is how much damage the explosion will do at its center.
    type: Float
    default: Number (1)
  - name: Amount Scalar
    description: If explosion radius is set to 0 this is how much to scale the damage amount for critical hits. If the explosion radius is greater than 0 this is how much damage the projectile will do at the edge of the explosion.
    type: Float
    default: Number (1)
  - name: Explosion Radius
    description: The radius of the explosion created by this projectile. If 0, this projectile doesn't create an explosion.
    type: Float
    default: Number
  - name: Explosion Effect
    description: The effect to use when the projectile explodes. If explosion radius is 0 this effect will not be created.
    type: Effect
    default: Bad Explosion
  - name: Explosion Sound Effect
    description: The sound effect to use when the projectile explodes. If explosion radius is 0 this effect will not be created.
    type: Effect
    default: Explosion Sound
  - name: Oversize
    description: A 0 to 1 range for how oversized the projectile should be, 0 being the default size, 1 being the maximum allowed size. The maximum allowed size is different for each projectile type.
    type: Float
    default: Number
  - name: Speed
    description: The speed in meters per second that the projectile will travel along its direction.
    type: Float
    default: Number (1)
  - name: Lifetime
    description: How long in seconds before the projectile expires.
    type: Float
    default: Number (1)
  - name: Impulse
    description: The impulse to apply to a target when hit by this projectile. If explosion radius greater than 0, this impulse will applied to all targets affected by the explosion.
    type: Float
    default: Number
  - name: Ricochet Count
    description: How many times the projectile will ricochet off the environment before expiring.
    type: Integer
    default: Number
  - name: Gravity
    description: The amount of gravity affecting the projectile, creating an arc. If negative, the projectile will arc upwards.
    type: Float
    default: Number
-
  description: Create a projectile entity that either heals or damages players or player owned entities. The projectile follows the provided target with variable strength. This action will fail if too many entities have been created.
  en-US: Create Homing Projectile
  args:
  - name: Projectile Type
    description: Type of projectile to be created. New options can be added to this list by enabling the Projectiles Workshop Extension.
    type: Projectile Effect
    default: Orb Projectile
  - name: Player
    description: The player who owns this projectile and will receive credit for kills. If null, the projectile will be owned by nobody. The projectile will not affect its owner.
    type: Player
    default: Event Player
  - name: Start Position
    description: The start position of the projectile. If null, the player's eye position will be used.
    type: Position
    default: "Null"
  - name: Direction
    description: The direction for the projectile to travel. If null, the player's facing direction will be used.
    type: Direction
    default: "Null"
  - name: Relative
    description: Whether the projectile's start position and direction are relative to the player or to the world.
    type: Relativity
    default: To World
  - name: Modify Health Type
    description: Whether the projectile will heal or damage targets it collides with.
    type: Modify Health Type
    default: Damage
  - name: Affected Team
    description: Which team the projectile will collide with. The projectile will never affect its owner regardless of team.
    type: Team
    default: Team
  - name: Amount
    description: The amount of damage or healing the projectile will apply to targets it collides with. If explosion radius is set to an amount greater than 0, this is how much damage the explosion will do at its center.
    type: Float
    default: Number (1)
  - name: Amount Scalar
    description: If explosion radius is set to 0 this is how much to scale the damage amount for critical hits. If the explosion radius is greater than 0 this is how much damage the projectile will do at the edge of the explosion.
    type: Float
    default: Number (1)
  - name: Explosion Radius
    description: The radius of the explosion created by this projectile. If 0, this projectile doesn't create an explosion.
    type: Float
    default: Number
  - name: Explosion Effect
    description: The effect to use when the projectile explodes. If explosion radius is 0 this effect will not be created.
    type: Effect
    default: Bad Explosion
  - name: Explosion Sound Effect
    description: The sound effect to use when the projectile explodes. If explosion radius is 0 this effect will not be created.
    type: Effect
    default: Explosion Sound
  - name: Oversize
    description: A 0 to 1 range for how oversized the projectile should be, 0 being the default size, 1 being the maximum allowed size. The maximum allowed size is different for each projectile type.
    type: Float
    default: Number
  - name: Speed
    description: The speed in meters per second that the projectile will travel along its direction.
    type: Float
    default: Number (1)
  - name: Lifetime
    description: How long in seconds before the projectile expires.
    type: Float
    default: Number (1)
  - name: Impulse
    description: The impulse to apply to a target when hit by this projectile. If explosion radius greater than 0, this impulse will applied to all targets affected by the explosion.
    type: Float
    default: Number
  - name: Homing Target
    description: The homing target for the projectile. If null, the projectile will travel in a straight line.
    type: Player
    default: "Null"
  - name: Homing Strength
    type: Float
    description: A 0 to 1 value representing how strongly the projectile will follow its target and how easily it will lose its target. At 0, the projectile won't follow its target at all, at 1, it will follow its target aggressively and never lose it.
    default: Number (1)
-
  description: Creates an in-world projectile effect entity. This effect entity will persist until destroyed. To obtain a reference to this entity, use the Last Created Entity value. This action will fail if too many entities have been created.
  en-US: Create Projectile Effect
  args:
  - name: Visible To
    description: One or more players who will be able to see the effect.
    type:
    - Player
    - Array: Player
    default: All Players
  - name: Projectile Type
    description: Type of projectile to be created. New options can be added to this list by enabling the Projectiles Workshop Extension.
    type: Projectile Effect
    default: Orb Projectile
  - name: Friendly To
    description: One or more players who the projectile will appear friendly to.
    type: Player
    default: "Null"
  - name: Position
    description: The position of the effect.
    type: Position
    default: Event Player
  - name: Direction
    description: The facing direction of the effect.
    type: Direction
    default: Vector
  - name: Oversize
    description: A 0 to 1 range for how oversized the projectile should be, 0 being the default size, 1 being the maximum allowed size. The maximum allowed size is different for each projectile type.
    type: Float
    default: Number
  - name: Reevaluation
    description: Specifies which of this action's inputs will be continuously reevaluated. The effect will keep asking for and using new values from reevaluated inputs.
    type: Projectile Effect Reevaluation
    default: Visible To Position Direction and Size
